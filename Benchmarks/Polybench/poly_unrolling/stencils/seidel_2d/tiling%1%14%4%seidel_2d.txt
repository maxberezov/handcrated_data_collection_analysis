GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_seidel_2d(int tsteps, int n, double A[4000+0][4000+0][4000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((n-3)/16)<(((((5*n-9)/32)<(((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))) ? ((5*n-9)/32): (((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))))) ? ((n-3)/16): (((((5*n-9)/32)<(((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))) ? ((5*n-9)/32): (((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))))); i_t += 1)
         for(j_t = (16*i_t-n+3)/4; j_t <= (n-3)/8; j_t += 1)
            for(i_l = (((32*i_t+3)>((32*i_t+8*j_t+3))) ? (32*i_t+3): ((32*i_t+8*j_t+3))); i_l <= (((32*i_t+8*j_t+40)<((((32*i_t+n+30)<((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))) ? (32*i_t+n+30): ((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))))) ? (32*i_t+8*j_t+40): ((((32*i_t+n+30)<((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))) ? (32*i_t+n+30): ((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))))); i_l += 1)
               for(j_l = ((((-i_l+2)/2)>(((((-i_l+8*j_t+2)/2)>((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))) ? ((-i_l+8*j_t+2)/2): ((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))))) ? ((-i_l+2)/2): (((((-i_l+8*j_t+2)/2)>((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))) ? ((-i_l+8*j_t+2)/2): ((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))))); j_l <= ((((-i_l+8*j_t+8)/2)<(((((-i_l+n-2)/2)<((-16*i_t-1))) ? ((-i_l+n-2)/2): ((-16*i_t-1))))) ? ((-i_l+8*j_t+8)/2): (((((-i_l+n-2)/2)<((-16*i_t-1))) ? ((-i_l+n-2)/2): ((-16*i_t-1))))); j_l += 1)
                  A[t][-j_l][i_l+2*j_l] = (A[t-1][-j_l-1][i_l+2*j_l-1]+A[t-1][-j_l-1][i_l+2*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[4000+0][4000+0][4000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((n-3)/16)<(((((5*n-9)/32)<(((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))) ? ((5*n-9)/32): (((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))))) ? ((n-3)/16): (((((5*n-9)/32)<(((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))) ? ((5*n-9)/32): (((((3*n-9)/32)<(((5*n-9)/64))) ? ((3*n-9)/32): (((5*n-9)/64))))))); i_t += 1)
         for(j_t = (16*i_t-n+3)/4; j_t <= (n-3)/8; j_t += 1)
            for(i_l = (((32*i_t+3)>((32*i_t+8*j_t+3))) ? (32*i_t+3): ((32*i_t+8*j_t+3))); i_l <= (((32*i_t+8*j_t+40)<((((32*i_t+n+30)<((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))) ? (32*i_t+n+30): ((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))))) ? (32*i_t+8*j_t+40): ((((32*i_t+n+30)<((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))) ? (32*i_t+n+30): ((((8*j_t+2*n+4)<((3*n-6))) ? (8*j_t+2*n+4): ((3*n-6))))))); i_l += 1)
               for(j_l = ((((-i_l+2)/2)>(((((-i_l+8*j_t+2)/2)>((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))) ? ((-i_l+8*j_t+2)/2): ((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))))) ? ((-i_l+2)/2): (((((-i_l+8*j_t+2)/2)>((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))) ? ((-i_l+8*j_t+2)/2): ((((-16*i_t-16)>((-n+2))) ? (-16*i_t-16): ((-n+2))))))); j_l <= ((((-i_l+8*j_t+8)/2)<(((((-i_l+n-2)/2)<((-16*i_t-1))) ? ((-i_l+n-2)/2): ((-16*i_t-1))))) ? ((-i_l+8*j_t+8)/2): (((((-i_l+n-2)/2)<((-16*i_t-1))) ? ((-i_l+n-2)/2): ((-16*i_t-1))))); j_l += 1)
                  A[t][-j_l][i_l+2*j_l] = (A[t-1][-j_l-1][i_l+2*j_l-1]+A[t-1][-j_l-1][i_l+2*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
