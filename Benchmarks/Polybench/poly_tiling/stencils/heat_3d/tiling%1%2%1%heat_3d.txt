GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[20+0][20+0][20+0], double B[20+0][20+0][20+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= (((n)<((((n/2)<(((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))) ? (n/2): (((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))))) ? (n): ((((n/2)<(((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))) ? (n/2): (((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))))); j_t += 1)
         for(k_t = 0; k_t <= (n-3)/8; k_t += 1)
            for(j_l = 4*j_t+16*k_t+3; j_l <= (((4*j_t+16*k_t+20)<((((4*j_t+2*n)<((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))) ? (4*j_t+2*n): ((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))))) ? (4*j_t+16*k_t+20): ((((4*j_t+2*n)<((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))) ? (4*j_t+2*n): ((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((j_l-4*j_t-3)/2)>(((((j_l-n+3)/2)>((8*k_t+1))) ? ((j_l-n+3)/2): ((8*k_t+1))))) ? ((j_l-4*j_t-3)/2): (((((j_l-n+3)/2)>((8*k_t+1))) ? ((j_l-n+3)/2): ((8*k_t+1))))); k_l <= ((((j_l-4*j_t-1)/2)<((((8*k_t+8)<((n-2))) ? (8*k_t+8): ((n-2))))) ? ((j_l-4*j_t-1)/2): ((((8*k_t+8)<((n-2))) ? (8*k_t+8): ((n-2))))); k_l += 1)
                  B[i][j_l-2*k_l][k_l] = 0.125*(A[i+1][j_l-2*k_l][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i-1][j_l-2*k_l][k_l])+0.125*(A[i][j_l-2*k_l+1][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l-1][k_l])+0.125*(A[i][j_l-2*k_l][k_l+1]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l][k_l-1])+A[i][j_l-2*k_l][k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[20+0][20+0][20+0], double B[20+0][20+0][20+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= (((n)<((((n/2)<(((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))) ? (n/2): (((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))))) ? (n): ((((n/2)<(((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))) ? (n/2): (((((n-3)/4)<(((3*n-9)/4))) ? ((n-3)/4): (((3*n-9)/4))))))); j_t += 1)
         for(k_t = 0; k_t <= (n-3)/8; k_t += 1)
            for(j_l = 4*j_t+16*k_t+3; j_l <= (((4*j_t+16*k_t+20)<((((4*j_t+2*n)<((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))) ? (4*j_t+2*n): ((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))))) ? (4*j_t+16*k_t+20): ((((4*j_t+2*n)<((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))) ? (4*j_t+2*n): ((((16*k_t+n+14)<((3*n-6))) ? (16*k_t+n+14): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((j_l-4*j_t-3)/2)>(((((j_l-n+3)/2)>((8*k_t+1))) ? ((j_l-n+3)/2): ((8*k_t+1))))) ? ((j_l-4*j_t-3)/2): (((((j_l-n+3)/2)>((8*k_t+1))) ? ((j_l-n+3)/2): ((8*k_t+1))))); k_l <= ((((j_l-4*j_t-1)/2)<((((8*k_t+8)<((n-2))) ? (8*k_t+8): ((n-2))))) ? ((j_l-4*j_t-1)/2): ((((8*k_t+8)<((n-2))) ? (8*k_t+8): ((n-2))))); k_l += 1)
                  B[i][j_l-2*k_l][k_l] = 0.125*(A[i+1][j_l-2*k_l][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i-1][j_l-2*k_l][k_l])+0.125*(A[i][j_l-2*k_l+1][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l-1][k_l])+0.125*(A[i][j_l-2*k_l][k_l+1]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l][k_l-1])+A[i][j_l-2*k_l][k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
