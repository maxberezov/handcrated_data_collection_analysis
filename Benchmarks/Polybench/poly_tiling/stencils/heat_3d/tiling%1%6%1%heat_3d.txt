GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[20+0][20+0][20+0], double B[20+0][20+0][20+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((n-3)/8)<(((((3*n-9)/16)<(((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))) ? ((3*n-9)/16): (((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))))) ? ((n-3)/8): (((((3*n-9)/16)<(((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))) ? ((3*n-9)/16): (((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))))); j_t += 1)
         for(k_t = (8*j_t-n+3)/2; k_t <= (n-3)/4; k_t += 1)
            for(j_l = (((16*j_t+3)>((16*j_t+4*k_t+3))) ? (16*j_t+3): ((16*j_t+4*k_t+3))); j_l <= (((16*j_t+4*k_t+20)<((((16*j_t+n+14)<((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))) ? (16*j_t+n+14): ((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))))) ? (16*j_t+4*k_t+20): ((((16*j_t+n+14)<((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))) ? (16*j_t+n+14): ((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((-j_l+2)/2)>(((((-j_l+4*k_t+2)/2)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? ((-j_l+4*k_t+2)/2): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))) ? ((-j_l+2)/2): (((((-j_l+4*k_t+2)/2)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? ((-j_l+4*k_t+2)/2): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))); k_l <= ((((-j_l+4*k_t+4)/2)<(((((-j_l+n-2)/2)<((-8*j_t-1))) ? ((-j_l+n-2)/2): ((-8*j_t-1))))) ? ((-j_l+4*k_t+4)/2): (((((-j_l+n-2)/2)<((-8*j_t-1))) ? ((-j_l+n-2)/2): ((-8*j_t-1))))); k_l += 1)
                  B[i][-k_l][j_l+2*k_l] = 0.125*(A[i+1][-k_l][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i-1][-k_l][j_l+2*k_l])+0.125*(A[i][-k_l+1][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l-1][j_l+2*k_l])+0.125*(A[i][-k_l][j_l+2*k_l+1]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l][j_l+2*k_l-1])+A[i][-k_l][j_l+2*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[20+0][20+0][20+0], double B[20+0][20+0][20+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((n-3)/8)<(((((3*n-9)/16)<(((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))) ? ((3*n-9)/16): (((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))))) ? ((n-3)/8): (((((3*n-9)/16)<(((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))) ? ((3*n-9)/16): (((((5*n-13)/16)<(((5*n-13)/32))) ? ((5*n-13)/16): (((5*n-13)/32))))))); j_t += 1)
         for(k_t = (8*j_t-n+3)/2; k_t <= (n-3)/4; k_t += 1)
            for(j_l = (((16*j_t+3)>((16*j_t+4*k_t+3))) ? (16*j_t+3): ((16*j_t+4*k_t+3))); j_l <= (((16*j_t+4*k_t+20)<((((16*j_t+n+14)<((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))) ? (16*j_t+n+14): ((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))))) ? (16*j_t+4*k_t+20): ((((16*j_t+n+14)<((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))) ? (16*j_t+n+14): ((((4*k_t+2*n)<((3*n-6))) ? (4*k_t+2*n): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((-j_l+2)/2)>(((((-j_l+4*k_t+2)/2)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? ((-j_l+4*k_t+2)/2): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))) ? ((-j_l+2)/2): (((((-j_l+4*k_t+2)/2)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? ((-j_l+4*k_t+2)/2): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))); k_l <= ((((-j_l+4*k_t+4)/2)<(((((-j_l+n-2)/2)<((-8*j_t-1))) ? ((-j_l+n-2)/2): ((-8*j_t-1))))) ? ((-j_l+4*k_t+4)/2): (((((-j_l+n-2)/2)<((-8*j_t-1))) ? ((-j_l+n-2)/2): ((-8*j_t-1))))); k_l += 1)
                  B[i][-k_l][j_l+2*k_l] = 0.125*(A[i+1][-k_l][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i-1][-k_l][j_l+2*k_l])+0.125*(A[i][-k_l+1][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l-1][j_l+2*k_l])+0.125*(A[i][-k_l][j_l+2*k_l+1]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l][j_l+2*k_l-1])+A[i][-k_l][j_l+2*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
