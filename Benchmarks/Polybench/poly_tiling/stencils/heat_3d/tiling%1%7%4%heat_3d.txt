GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((7*n-1)/16)<((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))) ? ((7*n-1)/16): ((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))); j_t += 1)
         for(k_t = (((-2*j_t-2)>(((((8*j_t-n+3)/4)>(((-n+3)/8))) ? ((8*j_t-n+3)/4): (((-n+3)/8))))) ? (-2*j_t-2): (((((8*j_t-n+3)/4)>(((-n+3)/8))) ? ((8*j_t-n+3)/4): (((-n+3)/8))))); k_t <= (((2*j_t+1)<(((((8*j_t+n+4)/12)<(((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))) ? ((8*j_t+n+4)/12): (((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))))) ? (2*j_t+1): (((((8*j_t+n+4)/12)<(((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))) ? ((8*j_t+n+4)/12): (((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))))); k_t += 1)
            for(j_l = (((16*j_t+4)>((((32*j_t+8*k_t+4)>((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))) ? (32*j_t+8*k_t+4): ((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))))) ? (16*j_t+4): ((((32*j_t+8*k_t+4)>((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))) ? (32*j_t+8*k_t+4): ((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))))); j_l <= (((32*j_t+8*k_t+41)<((((16*j_t+2*n+13)<((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))) ? (16*j_t+2*n+13): ((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))))) ? (32*j_t+8*k_t+41): ((((16*j_t+2*n+13)<((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))) ? (16*j_t+2*n+13): ((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))))); j_l += 1)
               for(k_l = ((((-j_l+16*j_t+3)/2)>(((((-j_l+3)/3)>(((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))))) ? ((-j_l+16*j_t+3)/2): (((((-j_l+3)/3)>(((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))))); k_l <= ((((-j_l+16*j_t+17)/2)<(((((-j_l-8*k_t)/4)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-8*k_t)/4): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))) ? ((-j_l+16*j_t+17)/2): (((((-j_l-8*k_t)/4)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-8*k_t)/4): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))); k_l += 1)
                  B[i][-k_l][j_l+3*k_l] = 0.125*(A[i+1][-k_l][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i-1][-k_l][j_l+3*k_l])+0.125*(A[i][-k_l+1][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l-1][j_l+3*k_l])+0.125*(A[i][-k_l][j_l+3*k_l+1]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l][j_l+3*k_l-1])+A[i][-k_l][j_l+3*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((7*n-1)/16)<((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))) ? ((7*n-1)/16): ((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))); j_t += 1)
         for(k_t = (((-2*j_t-2)>(((((8*j_t-n+3)/4)>(((-n+3)/8))) ? ((8*j_t-n+3)/4): (((-n+3)/8))))) ? (-2*j_t-2): (((((8*j_t-n+3)/4)>(((-n+3)/8))) ? ((8*j_t-n+3)/4): (((-n+3)/8))))); k_t <= (((2*j_t+1)<(((((8*j_t+n+4)/12)<(((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))) ? ((8*j_t+n+4)/12): (((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))))) ? (2*j_t+1): (((((8*j_t+n+4)/12)<(((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))) ? ((8*j_t+n+4)/12): (((((-8*j_t+n-3)/4)<(((n-3)/8))) ? ((-8*j_t+n-3)/4): (((n-3)/8))))))); k_t += 1)
            for(j_l = (((16*j_t+4)>((((32*j_t+8*k_t+4)>((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))) ? (32*j_t+8*k_t+4): ((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))))) ? (16*j_t+4): ((((32*j_t+8*k_t+4)>((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))) ? (32*j_t+8*k_t+4): ((((48*j_t-2*n+10)>((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))) ? (48*j_t-2*n+10): ((((-8*k_t-3)>((24*k_t+4))) ? (-8*k_t-3): ((24*k_t+4))))))))); j_l <= (((32*j_t+8*k_t+41)<((((16*j_t+2*n+13)<((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))) ? (16*j_t+2*n+13): ((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))))) ? (32*j_t+8*k_t+41): ((((16*j_t+2*n+13)<((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))) ? (16*j_t+2*n+13): ((((24*k_t+4*n+13)<((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))) ? (24*k_t+4*n+13): ((((-8*k_t+4*n-8)<((4*n-8))) ? (-8*k_t+4*n-8): ((4*n-8))))))))); j_l += 1)
               for(k_l = ((((-j_l+16*j_t+3)/2)>(((((-j_l+3)/3)>(((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))))) ? ((-j_l+16*j_t+3)/2): (((((-j_l+3)/3)>(((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-8*k_t-4)/4)>((-n+2))) ? ((-j_l-8*k_t-4)/4): ((-n+2))))))); k_l <= ((((-j_l+16*j_t+17)/2)<(((((-j_l-8*k_t)/4)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-8*k_t)/4): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))) ? ((-j_l+16*j_t+17)/2): (((((-j_l-8*k_t)/4)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-8*k_t)/4): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))); k_l += 1)
                  B[i][-k_l][j_l+3*k_l] = 0.125*(A[i+1][-k_l][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i-1][-k_l][j_l+3*k_l])+0.125*(A[i][-k_l+1][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l-1][j_l+3*k_l])+0.125*(A[i][-k_l][j_l+3*k_l+1]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l][j_l+3*k_l-1])+A[i][-k_l][j_l+3*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
