GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LS
void kernel_heat_3d(int tsteps, int n, double A[10+0][10+0][10+0], double B[10+0][10+0][10+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-5*n-13)/32)>(((((-3*n-13)/32)>(((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))) ? ((-3*n-13)/32): (((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))))) ? ((-5*n-13)/32): (((((-3*n-13)/32)>(((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))) ? ((-3*n-13)/32): (((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))))); j_t <= ((((3*n-8)/8)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))))) ? ((3*n-8)/8): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))))); j_t += 1)
         for(k_t = ((((-4*j_t-n+19)/20)>(((((-4*j_t-n+3)/4)>(((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*j_t-n+3)/4): (((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))))) ? ((-4*j_t-n+19)/20): (((((-4*j_t-n+3)/4)>(((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*j_t-n+3)/4): (((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))))); k_t <= ((((j_t+4)/3)<(((((-j_t+3)/5)<(((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))) ? ((-j_t+3)/5): (((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))))) ? ((j_t+4)/3): (((((-j_t+3)/5)<(((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))) ? ((-j_t+3)/5): (((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))))); k_t += 1)
            for(j_l = (((2)>((((-8*j_t-8*k_t-5)>((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))) ? (-8*j_t-8*k_t-5): ((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))))) ? (2): ((((-8*j_t-8*k_t-5)>((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))) ? (-8*j_t-8*k_t-5): ((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))))); j_l <= (((8*j_t+8*k_t+2*n+3)<((((-8*j_t-8*k_t+2*n-4)<((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))) ? (-8*j_t-8*k_t+2*n-4): ((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))))) ? (8*j_t+8*k_t+2*n+3): ((((-8*j_t-8*k_t+2*n-4)<((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))) ? (-8*j_t-8*k_t+2*n-4): ((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))))); j_l += 1)
               for(k_l = ((((-j_l-8*j_t-8*k_t-6)/2)>((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))) ? ((-j_l-8*j_t-8*k_t-6)/2): ((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))); k_l <= ((((-j_l-8*j_t-8*k_t)/2)<((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))) ? ((-j_l-8*j_t-8*k_t)/2): ((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))); k_l += 1)
                  B[i][-k_l][j_l+k_l] = 0.125*(A[i+1][-k_l][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i-1][-k_l][j_l+k_l])+0.125*(A[i][-k_l+1][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l-1][j_l+k_l])+0.125*(A[i][-k_l][j_l+k_l+1]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l][j_l+k_l-1])+A[i][-k_l][j_l+k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[10+0][10+0][10+0], double B[10+0][10+0][10+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-5*n-13)/32)>(((((-3*n-13)/32)>(((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))) ? ((-3*n-13)/32): (((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))))) ? ((-5*n-13)/32): (((((-3*n-13)/32)>(((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))) ? ((-3*n-13)/32): (((((-3*n-1)/16)>(((-5*n+3)/16))) ? ((-3*n-1)/16): (((-5*n+3)/16))))))); j_t <= ((((3*n-8)/8)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))))) ? ((3*n-8)/8): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((5*n-15)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))))); j_t += 1)
         for(k_t = ((((-4*j_t-n+19)/20)>(((((-4*j_t-n+3)/4)>(((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*j_t-n+3)/4): (((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))))) ? ((-4*j_t-n+19)/20): (((((-4*j_t-n+3)/4)>(((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*j_t-n+3)/4): (((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))))); k_t <= ((((j_t+4)/3)<(((((-j_t+3)/5)<(((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))) ? ((-j_t+3)/5): (((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))))) ? ((j_t+4)/3): (((((-j_t+3)/5)<(((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))) ? ((-j_t+3)/5): (((((-4*j_t+n-3)/4)<(((-8*j_t+n-3)/8))) ? ((-4*j_t+n-3)/4): (((-8*j_t+n-3)/8))))))); k_t += 1)
            for(j_l = (((2)>((((-8*j_t-8*k_t-5)>((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))) ? (-8*j_t-8*k_t-5): ((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))))) ? (2): ((((-8*j_t-8*k_t-5)>((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))) ? (-8*j_t-8*k_t-5): ((((8*j_t+8*k_t+2)>((-32*k_t+2))) ? (8*j_t+8*k_t+2): ((-32*k_t+2))))))); j_l <= (((8*j_t+8*k_t+2*n+3)<((((-8*j_t-8*k_t+2*n-4)<((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))) ? (-8*j_t-8*k_t+2*n-4): ((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))))) ? (8*j_t+8*k_t+2*n+3): ((((-8*j_t-8*k_t+2*n-4)<((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))) ? (-8*j_t-8*k_t+2*n-4): ((((-32*k_t+33)<((2*n-4))) ? (-32*k_t+33): ((2*n-4))))))); j_l += 1)
               for(k_l = ((((-j_l-8*j_t-8*k_t-6)/2)>((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))) ? ((-j_l-8*j_t-8*k_t-6)/2): ((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))); k_l <= ((((-j_l-8*j_t-8*k_t)/2)<((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))) ? ((-j_l-8*j_t-8*k_t)/2): ((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))); k_l += 1)
                  B[i][-k_l][j_l+k_l] = 0.125*(A[i+1][-k_l][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i-1][-k_l][j_l+k_l])+0.125*(A[i][-k_l+1][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l-1][j_l+k_l])+0.125*(A[i][-k_l][j_l+k_l+1]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l][j_l+k_l-1])+A[i][-k_l][j_l+k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
