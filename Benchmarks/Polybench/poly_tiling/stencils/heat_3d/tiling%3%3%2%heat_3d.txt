GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LS
void kernel_heat_3d(int tsteps, int n, double A[40+0][40+0][40+0], double B[40+0][40+0][40+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = (-n+3)/8; j_t <= ((((n-3)/4)<(((3*n-9)/8))) ? ((n-3)/4): (((3*n-9)/8))); j_t += 1)
         for(k_t = (((-2*j_t-2)>(((((-8*j_t-n+7)/12)>(((-n+6)/4))) ? ((-8*j_t-n+7)/12): (((-n+6)/4))))) ? (-2*j_t-2): (((((-8*j_t-n+7)/12)>(((-n+6)/4))) ? ((-8*j_t-n+7)/12): (((-n+6)/4))))); k_t <= (((-2*j_t/3)<(((-8*j_t+n-3)/4))) ? (-2*j_t/3): (((-8*j_t+n-3)/4))); k_t += 1)
            for(j_l = (((2)>((((-16*j_t-16*k_t-13)>((-8*k_t+2))) ? (-16*j_t-16*k_t-13): ((-8*k_t+2))))) ? (2): ((((-16*j_t-16*k_t-13)>((-8*k_t+2))) ? (-16*j_t-16*k_t-13): ((-8*k_t+2))))); j_l <= (((16*j_t+16*k_t+2*n+11)<((((-16*j_t-16*k_t+2*n-4)<((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))) ? (-16*j_t-16*k_t+2*n-4): ((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))))) ? (16*j_t+16*k_t+2*n+11): ((((-16*j_t-16*k_t+2*n-4)<((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))) ? (-16*j_t-16*k_t+2*n-4): ((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))))); j_l += 1)
               for(k_l = ((((-j_l-16*j_t-16*k_t-14)/2)>((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))) ? ((-j_l-16*j_t-16*k_t-14)/2): ((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))); k_l <= ((((-j_l-16*j_t-16*k_t)/2)<((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))) ? ((-j_l-16*j_t-16*k_t)/2): ((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))); k_l += 1)
                  B[i][-k_l][j_l+k_l] = 0.125*(A[i+1][-k_l][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i-1][-k_l][j_l+k_l])+0.125*(A[i][-k_l+1][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l-1][j_l+k_l])+0.125*(A[i][-k_l][j_l+k_l+1]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l][j_l+k_l-1])+A[i][-k_l][j_l+k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[40+0][40+0][40+0], double B[40+0][40+0][40+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = (-n+3)/8; j_t <= ((((n-3)/4)<(((3*n-9)/8))) ? ((n-3)/4): (((3*n-9)/8))); j_t += 1)
         for(k_t = (((-2*j_t-2)>(((((-8*j_t-n+7)/12)>(((-n+6)/4))) ? ((-8*j_t-n+7)/12): (((-n+6)/4))))) ? (-2*j_t-2): (((((-8*j_t-n+7)/12)>(((-n+6)/4))) ? ((-8*j_t-n+7)/12): (((-n+6)/4))))); k_t <= (((-2*j_t/3)<(((-8*j_t+n-3)/4))) ? (-2*j_t/3): (((-8*j_t+n-3)/4))); k_t += 1)
            for(j_l = (((2)>((((-16*j_t-16*k_t-13)>((-8*k_t+2))) ? (-16*j_t-16*k_t-13): ((-8*k_t+2))))) ? (2): ((((-16*j_t-16*k_t-13)>((-8*k_t+2))) ? (-16*j_t-16*k_t-13): ((-8*k_t+2))))); j_l <= (((16*j_t+16*k_t+2*n+11)<((((-16*j_t-16*k_t+2*n-4)<((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))) ? (-16*j_t-16*k_t+2*n-4): ((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))))) ? (16*j_t+16*k_t+2*n+11): ((((-16*j_t-16*k_t+2*n-4)<((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))) ? (-16*j_t-16*k_t+2*n-4): ((((-8*k_t+9)<((2*n-4))) ? (-8*k_t+9): ((2*n-4))))))); j_l += 1)
               for(k_l = ((((-j_l-16*j_t-16*k_t-14)/2)>((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))) ? ((-j_l-16*j_t-16*k_t-14)/2): ((((-j_l+1)>((-n+2))) ? (-j_l+1): ((-n+2))))); k_l <= ((((-j_l-16*j_t-16*k_t)/2)<((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))) ? ((-j_l-16*j_t-16*k_t)/2): ((((-j_l+n-2)<((-1))) ? (-j_l+n-2): ((-1))))); k_l += 1)
                  B[i][-k_l][j_l+k_l] = 0.125*(A[i+1][-k_l][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i-1][-k_l][j_l+k_l])+0.125*(A[i][-k_l+1][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l-1][j_l+k_l])+0.125*(A[i][-k_l][j_l+k_l+1]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l][j_l+k_l-1])+A[i][-k_l][j_l+k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
