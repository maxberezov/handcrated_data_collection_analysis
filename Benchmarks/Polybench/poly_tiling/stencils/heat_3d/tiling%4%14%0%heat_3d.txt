GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[10+0][10+0][10+0], double B[10+0][10+0][10+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((3*n-9)/8)<(((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))) ? ((3*n-9)/8): (((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))); j_t += 1)
         for(k_t = (((-j_t)>(((-n+18)/16))) ? (-j_t): (((-n+18)/16))); k_t <= ((((-8*j_t+n-3)/8)<((0))) ? ((-8*j_t+n-3)/8): ((0))); k_t += 1)
            for(j_l = 8*j_t-24*k_t+3; j_l <= (((8*j_t-24*k_t+40)<((((8*j_t+8*k_t+2*n+4)<((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))) ? (8*j_t+8*k_t+2*n+4): ((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))))) ? (8*j_t-24*k_t+40): ((((8*j_t+8*k_t+2*n+4)<((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))) ? (8*j_t+8*k_t+2*n+4): ((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((-j_l+8*j_t+8*k_t+2)/2)>((((16*k_t-16)>((-n+2))) ? (16*k_t-16): ((-n+2))))) ? ((-j_l+8*j_t+8*k_t+2)/2): ((((16*k_t-16)>((-n+2))) ? (16*k_t-16): ((-n+2))))); k_l <= ((((-j_l+8*j_t+8*k_t+8)/2)<(((((-j_l+n-2)/2)<((16*k_t-1))) ? ((-j_l+n-2)/2): ((16*k_t-1))))) ? ((-j_l+8*j_t+8*k_t+8)/2): (((((-j_l+n-2)/2)<((16*k_t-1))) ? ((-j_l+n-2)/2): ((16*k_t-1))))); k_l += 1)
                  B[i][-k_l][j_l+2*k_l] = 0.125*(A[i+1][-k_l][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i-1][-k_l][j_l+2*k_l])+0.125*(A[i][-k_l+1][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l-1][j_l+2*k_l])+0.125*(A[i][-k_l][j_l+2*k_l+1]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l][j_l+2*k_l-1])+A[i][-k_l][j_l+2*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[10+0][10+0][10+0], double B[10+0][10+0][10+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((3*n-9)/8)<(((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))) ? ((3*n-9)/8): (((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))); j_t += 1)
         for(k_t = (((-j_t)>(((-n+18)/16))) ? (-j_t): (((-n+18)/16))); k_t <= ((((-8*j_t+n-3)/8)<((0))) ? ((-8*j_t+n-3)/8): ((0))); k_t += 1)
            for(j_l = 8*j_t-24*k_t+3; j_l <= (((8*j_t-24*k_t+40)<((((8*j_t+8*k_t+2*n+4)<((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))) ? (8*j_t+8*k_t+2*n+4): ((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))))) ? (8*j_t-24*k_t+40): ((((8*j_t+8*k_t+2*n+4)<((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))) ? (8*j_t+8*k_t+2*n+4): ((((-32*k_t+n+30)<((3*n-6))) ? (-32*k_t+n+30): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((-j_l+8*j_t+8*k_t+2)/2)>((((16*k_t-16)>((-n+2))) ? (16*k_t-16): ((-n+2))))) ? ((-j_l+8*j_t+8*k_t+2)/2): ((((16*k_t-16)>((-n+2))) ? (16*k_t-16): ((-n+2))))); k_l <= ((((-j_l+8*j_t+8*k_t+8)/2)<(((((-j_l+n-2)/2)<((16*k_t-1))) ? ((-j_l+n-2)/2): ((16*k_t-1))))) ? ((-j_l+8*j_t+8*k_t+8)/2): (((((-j_l+n-2)/2)<((16*k_t-1))) ? ((-j_l+n-2)/2): ((16*k_t-1))))); k_l += 1)
                  B[i][-k_l][j_l+2*k_l] = 0.125*(A[i+1][-k_l][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i-1][-k_l][j_l+2*k_l])+0.125*(A[i][-k_l+1][j_l+2*k_l]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l-1][j_l+2*k_l])+0.125*(A[i][-k_l][j_l+2*k_l+1]-2.0*A[i][-k_l][j_l+2*k_l]+A[i][-k_l][j_l+2*k_l-1])+A[i][-k_l][j_l+2*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
