GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LI
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-3*n-40)/16)>(((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))) ? ((-3*n-40)/16): (((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))); j_t <= ((((5*n+33)/16)<(((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((5*n+33)/16): (((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))); j_t += 1)
         for(k_t = ((((-4*j_t-n+19)/20)>(((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*j_t-n+19)/20): (((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))); k_t <= ((((j_t+4)/3)<(((((-j_t+3)/5)<(((-8*j_t+n-3)/8))) ? ((-j_t+3)/5): (((-8*j_t+n-3)/8))))) ? ((j_t+4)/3): (((((-j_t+3)/5)<(((-8*j_t+n-3)/8))) ? ((-j_t+3)/5): (((-8*j_t+n-3)/8))))); k_t += 1)
            for(j_l = (((1)>((((4*j_t-12*k_t+1)>((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))) ? (4*j_t-12*k_t+1): ((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))))) ? (1): ((((4*j_t-12*k_t+1)>((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))) ? (4*j_t-12*k_t+1): ((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))))); j_l <= (((4*j_t-12*k_t+20)<((((8*j_t+8*k_t+n+5)<((n-2))) ? (8*j_t+8*k_t+n+5): ((n-2))))) ? (4*j_t-12*k_t+20): ((((8*j_t+8*k_t+n+5)<((n-2))) ? (8*j_t+8*k_t+n+5): ((n-2))))); j_l += 1)
               for(k_l = (((j_l-8*j_t-8*k_t-7)>((((-j_l-32*k_t+2)>((1))) ? (-j_l-32*k_t+2): ((1))))) ? (j_l-8*j_t-8*k_t-7): ((((-j_l-32*k_t+2)>((1))) ? (-j_l-32*k_t+2): ((1))))); k_l <= (((j_l-8*j_t-8*k_t)<((((-j_l-32*k_t+33)<((n-2))) ? (-j_l-32*k_t+33): ((n-2))))) ? (j_l-8*j_t-8*k_t): ((((-j_l-32*k_t+33)<((n-2))) ? (-j_l-32*k_t+33): ((n-2))))); k_l += 1)
                  B[i][j_l][k_l] = 0.125*(A[i+1][j_l][k_l]-2.0*A[i][j_l][k_l]+A[i-1][j_l][k_l])+0.125*(A[i][j_l+1][k_l]-2.0*A[i][j_l][k_l]+A[i][j_l-1][k_l])+0.125*(A[i][j_l][k_l+1]-2.0*A[i][j_l][k_l]+A[i][j_l][k_l-1])+A[i][j_l][k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-3*n-40)/16)>(((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))) ? ((-3*n-40)/16): (((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))); j_t <= ((((5*n+33)/16)<(((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((5*n+33)/16): (((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))); j_t += 1)
         for(k_t = ((((-4*j_t-n+19)/20)>(((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*j_t-n+19)/20): (((((-8*j_t-n+3)/8)>(((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))) ? ((-8*j_t-n+3)/8): (((((4*j_t-n+14)/12)>(((-n+18)/16))) ? ((4*j_t-n+14)/12): (((-n+18)/16))))))); k_t <= ((((j_t+4)/3)<(((((-j_t+3)/5)<(((-8*j_t+n-3)/8))) ? ((-j_t+3)/5): (((-8*j_t+n-3)/8))))) ? ((j_t+4)/3): (((((-j_t+3)/5)<(((-8*j_t+n-3)/8))) ? ((-j_t+3)/5): (((-8*j_t+n-3)/8))))); k_t += 1)
            for(j_l = (((1)>((((4*j_t-12*k_t+1)>((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))) ? (4*j_t-12*k_t+1): ((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))))) ? (1): ((((4*j_t-12*k_t+1)>((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))) ? (4*j_t-12*k_t+1): ((((8*j_t+8*k_t+1)>((-32*k_t-n+4))) ? (8*j_t+8*k_t+1): ((-32*k_t-n+4))))))); j_l <= (((4*j_t-12*k_t+20)<((((8*j_t+8*k_t+n+5)<((n-2))) ? (8*j_t+8*k_t+n+5): ((n-2))))) ? (4*j_t-12*k_t+20): ((((8*j_t+8*k_t+n+5)<((n-2))) ? (8*j_t+8*k_t+n+5): ((n-2))))); j_l += 1)
               for(k_l = (((j_l-8*j_t-8*k_t-7)>((((-j_l-32*k_t+2)>((1))) ? (-j_l-32*k_t+2): ((1))))) ? (j_l-8*j_t-8*k_t-7): ((((-j_l-32*k_t+2)>((1))) ? (-j_l-32*k_t+2): ((1))))); k_l <= (((j_l-8*j_t-8*k_t)<((((-j_l-32*k_t+33)<((n-2))) ? (-j_l-32*k_t+33): ((n-2))))) ? (j_l-8*j_t-8*k_t): ((((-j_l-32*k_t+33)<((n-2))) ? (-j_l-32*k_t+33): ((n-2))))); k_l += 1)
                  B[i][j_l][k_l] = 0.125*(A[i+1][j_l][k_l]-2.0*A[i][j_l][k_l]+A[i-1][j_l][k_l])+0.125*(A[i][j_l+1][k_l]-2.0*A[i][j_l][k_l]+A[i][j_l-1][k_l])+0.125*(A[i][j_l][k_l+1]-2.0*A[i][j_l][k_l]+A[i][j_l][k_l-1])+A[i][j_l][k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
