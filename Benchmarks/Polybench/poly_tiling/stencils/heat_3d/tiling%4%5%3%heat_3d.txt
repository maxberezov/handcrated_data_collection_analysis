GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[120+0][120+0][120+0], double B[120+0][120+0][120+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-5*n+17)/96)>(((((-5*n+16)/48)>(((-n+3)/16))) ? ((-5*n+16)/48): (((-n+3)/16))))) ? ((-5*n+17)/96): (((((-5*n+16)/48)>(((-n+3)/16))) ? ((-5*n+16)/48): (((-n+3)/16))))); j_t <= ((((n-3)/4)<(((((13*n-39)/32)<(((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))) ? ((13*n-39)/32): (((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))))) ? ((n-3)/4): (((((13*n-39)/32)<(((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))) ? ((13*n-39)/32): (((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))))); j_t += 1)
         for(k_t = ((((-4*j_t-2)/3)>(((((-128*j_t-3*n-3)/120)>(((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))) ? ((-128*j_t-3*n-3)/120): (((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))))) ? ((-4*j_t-2)/3): (((((-128*j_t-3*n-3)/120)>(((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))) ? ((-128*j_t-3*n-3)/120): (((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))))); k_t <= (((-4*j_t/5)<(((((-12*j_t+4)/17)<(((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))) ? ((-12*j_t+4)/17): (((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))))) ? (-4*j_t/5): (((((-12*j_t+4)/17)<(((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))) ? ((-12*j_t+4)/17): (((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))))); k_t += 1)
            for(j_l = (((96*j_t+96*k_t+2)>((((128*j_t+120*k_t+2)>((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))) ? (128*j_t+120*k_t+2): ((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))))) ? (96*j_t+96*k_t+2): ((((128*j_t+120*k_t+2)>((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))) ? (128*j_t+120*k_t+2): ((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))))); j_l <= (((128*j_t+120*k_t+133)<((((160*j_t+160*k_t+2*n+151)<((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))) ? (160*j_t+160*k_t+2*n+151): ((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))))) ? (128*j_t+120*k_t+133): ((((160*j_t+160*k_t+2*n+151)<((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))) ? (160*j_t+160*k_t+2*n+151): ((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))))); j_l += 1)
               for(k_l = ((((j_l-32*j_t-32*k_t-30)/2)>(((((j_l+3)/3)>(((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))) ? ((j_l+3)/3): (((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))))) ? ((j_l-32*j_t-32*k_t-30)/2): (((((j_l+3)/3)>(((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))) ? ((j_l+3)/3): (((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))))); k_l <= ((((j_l-32*j_t-32*k_t)/2)<(((((3*j_l-8*k_t+9)/8)<(((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))) ? ((3*j_l-8*k_t+9)/8): (((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))))) ? ((j_l-32*j_t-32*k_t)/2): (((((3*j_l-8*k_t+9)/8)<(((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))) ? ((3*j_l-8*k_t+9)/8): (((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))))); k_l += 1)
                  B[i][-j_l+3*k_l][-2*j_l+5*k_l] = 0.125*(A[i+1][-j_l+3*k_l][-2*j_l+5*k_l]-2.0*A[i][-j_l+3*k_l][-2*j_l+5*k_l]+A[i-1][-j_l+3*k_l][-2*j_l+5*k_l])+0.125*(A[i][-j_l+3*k_l+1][-2*j_l+5*k_l]-2.0*A[i][-j_l+3*k_l][-2*j_l+5*k_l]+A[i][-j_l+3*k_l-1][-2*j_l+5*k_l])+0.125*(A[i][-j_l+3*k_l][-2*j_l+5*k_l+1]-2.0*A[i][-j_l+3*k_l][-2*j_l+5*k_l]+A[i][-j_l+3*k_l][-2*j_l+5*k_l-1])+A[i][-j_l+3*k_l][-2*j_l+5*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[120+0][120+0][120+0], double B[120+0][120+0][120+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-5*n+17)/96)>(((((-5*n+16)/48)>(((-n+3)/16))) ? ((-5*n+16)/48): (((-n+3)/16))))) ? ((-5*n+17)/96): (((((-5*n+16)/48)>(((-n+3)/16))) ? ((-5*n+16)/48): (((-n+3)/16))))); j_t <= ((((n-3)/4)<(((((13*n-39)/32)<(((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))) ? ((13*n-39)/32): (((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))))) ? ((n-3)/4): (((((13*n-39)/32)<(((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))) ? ((13*n-39)/32): (((((49*n-147)/96)<(((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))) ? ((49*n-147)/96): (((((55*n-165)/96)<(((211*n-633)/480))) ? ((55*n-165)/96): (((211*n-633)/480))))))))); j_t += 1)
         for(k_t = ((((-4*j_t-2)/3)>(((((-128*j_t-3*n-3)/120)>(((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))) ? ((-128*j_t-3*n-3)/120): (((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))))) ? ((-4*j_t-2)/3): (((((-128*j_t-3*n-3)/120)>(((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))) ? ((-128*j_t-3*n-3)/120): (((((-48*j_t-5*n+36)/68)>(((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))) ? ((-48*j_t-5*n+36)/68): (((((-16*j_t-n+7)/20)>(((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))) ? ((-16*j_t-n+7)/20): (((((-n+6)/4)>(((-11*n+56)/24))) ? ((-n+6)/4): (((-11*n+56)/24))))))))))); k_t <= (((-4*j_t/5)<(((((-12*j_t+4)/17)<(((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))) ? ((-12*j_t+4)/17): (((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))))) ? (-4*j_t/5): (((((-12*j_t+4)/17)<(((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))) ? ((-12*j_t+4)/17): (((((-16*j_t+n-3)/12)<(((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))) ? ((-16*j_t+n-3)/12): (((((-20*j_t+n-3)/17)<(((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))) ? ((-20*j_t+n-3)/17): (((((-32*j_t+n-3)/32)<(((-128*j_t+5*n-15)/120))) ? ((-32*j_t+n-3)/32): (((-128*j_t+5*n-15)/120))))))))))); k_t += 1)
            for(j_l = (((96*j_t+96*k_t+2)>((((128*j_t+120*k_t+2)>((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))) ? (128*j_t+120*k_t+2): ((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))))) ? (96*j_t+96*k_t+2): ((((128*j_t+120*k_t+2)>((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))) ? (128*j_t+120*k_t+2): ((((24*k_t-19)>((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))) ? (24*k_t-19): ((((-40*k_t-8*n+26)>((-3*n+11))) ? (-40*k_t-8*n+26): ((-3*n+11))))))))); j_l <= (((128*j_t+120*k_t+133)<((((160*j_t+160*k_t+2*n+151)<((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))) ? (160*j_t+160*k_t+2*n+151): ((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))))) ? (128*j_t+120*k_t+133): ((((160*j_t+160*k_t+2*n+151)<((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))) ? (160*j_t+160*k_t+2*n+151): ((((96*j_t+96*k_t+2*n+89)<((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))) ? (96*j_t+96*k_t+2*n+89): ((((-40*k_t+37)<((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))) ? (-40*k_t+37): ((((24*k_t+8*n-22)<((5*n-13))) ? (24*k_t+8*n-22): ((5*n-13))))))))))); j_l += 1)
               for(k_l = ((((j_l-32*j_t-32*k_t-30)/2)>(((((j_l+3)/3)>(((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))) ? ((j_l+3)/3): (((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))))) ? ((j_l-32*j_t-32*k_t-30)/2): (((((j_l+3)/3)>(((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))) ? ((j_l+3)/3): (((((2*j_l+5)/5)>(((3*j_l-8*k_t+9)/8))) ? ((2*j_l+5)/5): (((3*j_l-8*k_t+9)/8))))))); k_l <= ((((j_l-32*j_t-32*k_t)/2)<(((((3*j_l-8*k_t+9)/8)<(((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))) ? ((3*j_l-8*k_t+9)/8): (((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))))) ? ((j_l-32*j_t-32*k_t)/2): (((((3*j_l-8*k_t+9)/8)<(((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))) ? ((3*j_l-8*k_t+9)/8): (((((2*j_l+n-2)/5)<(((j_l+n-2)/3))) ? ((2*j_l+n-2)/5): (((j_l+n-2)/3))))))); k_l += 1)
                  B[i][-j_l+3*k_l][-2*j_l+5*k_l] = 0.125*(A[i+1][-j_l+3*k_l][-2*j_l+5*k_l]-2.0*A[i][-j_l+3*k_l][-2*j_l+5*k_l]+A[i-1][-j_l+3*k_l][-2*j_l+5*k_l])+0.125*(A[i][-j_l+3*k_l+1][-2*j_l+5*k_l]-2.0*A[i][-j_l+3*k_l][-2*j_l+5*k_l]+A[i][-j_l+3*k_l-1][-2*j_l+5*k_l])+0.125*(A[i][-j_l+3*k_l][-2*j_l+5*k_l+1]-2.0*A[i][-j_l+3*k_l][-2*j_l+5*k_l]+A[i][-j_l+3*k_l][-2*j_l+5*k_l-1])+A[i][-j_l+3*k_l][-2*j_l+5*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
