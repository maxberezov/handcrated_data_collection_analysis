GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[40+0][40+0][40+0], double B[40+0][40+0][40+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((3*n-2)/8)<(((((3*n-2)/16)<(((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))) ? ((3*n-2)/16): (((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))))) ? ((3*n-2)/8): (((((3*n-2)/16)<(((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))) ? ((3*n-2)/16): (((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))))); j_t += 1)
         for(k_t = (8*j_t-n+3)/8; k_t <= (n-3)/8; k_t += 1)
            for(j_l = (((8*j_t+2)>((8*j_t+8*k_t+2))) ? (8*j_t+2): ((8*j_t+8*k_t+2))); j_l <= (((8*j_t+8*k_t+16)<((((8*j_t+n+6)<((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))) ? (8*j_t+n+6): ((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))))) ? (8*j_t+8*k_t+16): ((((8*j_t+n+6)<((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))) ? (8*j_t+n+6): ((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))))); j_l += 1)
               for(k_l = (((-j_l+1)>((((-j_l+8*k_t+1)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? (-j_l+8*k_t+1): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))) ? (-j_l+1): ((((-j_l+8*k_t+1)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? (-j_l+8*k_t+1): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))); k_l <= (((-j_l+8*k_t+8)<((((-j_l+n-2)<((-8*j_t-1))) ? (-j_l+n-2): ((-8*j_t-1))))) ? (-j_l+8*k_t+8): ((((-j_l+n-2)<((-8*j_t-1))) ? (-j_l+n-2): ((-8*j_t-1))))); k_l += 1)
                  B[i][-k_l][j_l+k_l] = 0.125*(A[i+1][-k_l][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i-1][-k_l][j_l+k_l])+0.125*(A[i][-k_l+1][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l-1][j_l+k_l])+0.125*(A[i][-k_l][j_l+k_l+1]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l][j_l+k_l-1])+A[i][-k_l][j_l+k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[40+0][40+0][40+0], double B[40+0][40+0][40+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((3*n-2)/8)<(((((3*n-2)/16)<(((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))) ? ((3*n-2)/16): (((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))))) ? ((3*n-2)/8): (((((3*n-2)/16)<(((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))) ? ((3*n-2)/16): (((((n-3)/4)<(((n-3)/8))) ? ((n-3)/4): (((n-3)/8))))))); j_t += 1)
         for(k_t = (8*j_t-n+3)/8; k_t <= (n-3)/8; k_t += 1)
            for(j_l = (((8*j_t+2)>((8*j_t+8*k_t+2))) ? (8*j_t+2): ((8*j_t+8*k_t+2))); j_l <= (((8*j_t+8*k_t+16)<((((8*j_t+n+6)<((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))) ? (8*j_t+n+6): ((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))))) ? (8*j_t+8*k_t+16): ((((8*j_t+n+6)<((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))) ? (8*j_t+n+6): ((((8*k_t+n+6)<((2*n-4))) ? (8*k_t+n+6): ((2*n-4))))))); j_l += 1)
               for(k_l = (((-j_l+1)>((((-j_l+8*k_t+1)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? (-j_l+8*k_t+1): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))) ? (-j_l+1): ((((-j_l+8*k_t+1)>((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))) ? (-j_l+8*k_t+1): ((((-8*j_t-8)>((-n+2))) ? (-8*j_t-8): ((-n+2))))))); k_l <= (((-j_l+8*k_t+8)<((((-j_l+n-2)<((-8*j_t-1))) ? (-j_l+n-2): ((-8*j_t-1))))) ? (-j_l+8*k_t+8): ((((-j_l+n-2)<((-8*j_t-1))) ? (-j_l+n-2): ((-8*j_t-1))))); k_l += 1)
                  B[i][-k_l][j_l+k_l] = 0.125*(A[i+1][-k_l][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i-1][-k_l][j_l+k_l])+0.125*(A[i][-k_l+1][j_l+k_l]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l-1][j_l+k_l])+0.125*(A[i][-k_l][j_l+k_l+1]-2.0*A[i][-k_l][j_l+k_l]+A[i][-k_l][j_l+k_l-1])+A[i][-k_l][j_l+k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
