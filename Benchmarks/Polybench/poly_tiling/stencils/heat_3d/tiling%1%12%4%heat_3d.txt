GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((n-3)/16)<(((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))) ? ((n-3)/16): (((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))); j_t += 1)
         for(k_t = 16*j_t-n+3; k_t <= (n-3)/4; k_t += 1)
            for(j_l = (((64*j_t+5)>((64*j_t+4*k_t+5))) ? (64*j_t+5): ((64*j_t+4*k_t+5))); j_l <= (((64*j_t+4*k_t+68)<((((64*j_t+n+62)<((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))) ? (64*j_t+n+62): ((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))))) ? (64*j_t+4*k_t+68): ((((64*j_t+n+62)<((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))) ? (64*j_t+n+62): ((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))))); j_l += 1)
               for(k_l = ((((-j_l+4)/4)>(((-j_l+4*k_t+4)/4))) ? ((-j_l+4)/4): (((-j_l+4*k_t+4)/4))); k_l <= ((((-j_l+4*k_t+4)/4)<(((-j_l+n-2)/4))) ? ((-j_l+4*k_t+4)/4): (((-j_l+n-2)/4))); k_l += 1)
                  B[i][-k_l][j_l+4*k_l] = 0.125*(A[i+1][-k_l][j_l+4*k_l]-2.0*A[i][-k_l][j_l+4*k_l]+A[i-1][-k_l][j_l+4*k_l])+0.125*(A[i][-k_l+1][j_l+4*k_l]-2.0*A[i][-k_l][j_l+4*k_l]+A[i][-k_l-1][j_l+4*k_l])+0.125*(A[i][-k_l][j_l+4*k_l+1]-2.0*A[i][-k_l][j_l+4*k_l]+A[i][-k_l][j_l+4*k_l-1])+A[i][-k_l][j_l+4*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((n-3)/16)<(((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))) ? ((n-3)/16): (((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))); j_t += 1)
         for(k_t = 16*j_t-n+3; k_t <= (n-3)/4; k_t += 1)
            for(j_l = (((64*j_t+5)>((64*j_t+4*k_t+5))) ? (64*j_t+5): ((64*j_t+4*k_t+5))); j_l <= (((64*j_t+4*k_t+68)<((((64*j_t+n+62)<((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))) ? (64*j_t+n+62): ((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))))) ? (64*j_t+4*k_t+68): ((((64*j_t+n+62)<((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))) ? (64*j_t+n+62): ((((4*k_t+4*n-4)<((5*n-10))) ? (4*k_t+4*n-4): ((5*n-10))))))); j_l += 1)
               for(k_l = ((((-j_l+4)/4)>(((-j_l+4*k_t+4)/4))) ? ((-j_l+4)/4): (((-j_l+4*k_t+4)/4))); k_l <= ((((-j_l+4*k_t+4)/4)<(((-j_l+n-2)/4))) ? ((-j_l+4*k_t+4)/4): (((-j_l+n-2)/4))); k_l += 1)
                  B[i][-k_l][j_l+4*k_l] = 0.125*(A[i+1][-k_l][j_l+4*k_l]-2.0*A[i][-k_l][j_l+4*k_l]+A[i-1][-k_l][j_l+4*k_l])+0.125*(A[i][-k_l+1][j_l+4*k_l]-2.0*A[i][-k_l][j_l+4*k_l]+A[i][-k_l-1][j_l+4*k_l])+0.125*(A[i][-k_l][j_l+4*k_l+1]-2.0*A[i][-k_l][j_l+4*k_l]+A[i][-k_l][j_l+4*k_l-1])+A[i][-k_l][j_l+4*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
