GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-7*n-13)/16)>(((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))) ? ((-7*n-13)/16): (((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))); j_t <= ((((3*n-7)/2)<(((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))) ? ((3*n-7)/2): (((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))); j_t += 1)
         for(k_t = ((((-4*j_t-n+11)/12)>(((((-8*j_t-n+3)/8)>(((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))) ? ((-8*j_t-n+3)/8): (((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))))) ? ((-4*j_t-n+11)/12): (((((-8*j_t-n+3)/8)>(((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))) ? ((-8*j_t-n+3)/8): (((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))))); k_t <= ((((j_t+4)/3)<((((j_t+2)<(((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))) ? (j_t+2): (((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))))) ? ((j_t+4)/3): ((((j_t+2)<(((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))) ? (j_t+2): (((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))))); k_t += 1)
            for(j_l = (((4)>((((-8*j_t-8*k_t-3)>((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))) ? (-8*j_t-8*k_t-3): ((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))))) ? (4): ((((-8*j_t-8*k_t-3)>((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))) ? (-8*j_t-8*k_t-3): ((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))))); j_l <= (((8*j_t-24*k_t+41)<((((24*j_t+24*k_t+4*n+13)<((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))) ? (24*j_t+24*k_t+4*n+13): ((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))))) ? (8*j_t-24*k_t+41): ((((24*j_t+24*k_t+4*n+13)<((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))) ? (24*j_t+24*k_t+4*n+13): ((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))))); j_l += 1)
               for(k_l = ((((-j_l-8*j_t-8*k_t-4)/4)>(((((-j_l+3)/3)>(((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))))) ? ((-j_l-8*j_t-8*k_t-4)/4): (((((-j_l+3)/3)>(((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))))); k_l <= ((((-j_l-8*j_t-8*k_t)/4)<(((((-j_l-16*k_t+17)/2)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-16*k_t+17)/2): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))) ? ((-j_l-8*j_t-8*k_t)/4): (((((-j_l-16*k_t+17)/2)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-16*k_t+17)/2): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))); k_l += 1)
                  B[i][-k_l][j_l+3*k_l] = 0.125*(A[i+1][-k_l][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i-1][-k_l][j_l+3*k_l])+0.125*(A[i][-k_l+1][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l-1][j_l+3*k_l])+0.125*(A[i][-k_l][j_l+3*k_l+1]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l][j_l+3*k_l-1])+A[i][-k_l][j_l+3*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[200+0][200+0][200+0], double B[200+0][200+0][200+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = ((((-7*n-13)/16)>(((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))) ? ((-7*n-13)/16): (((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))); j_t <= ((((3*n-7)/2)<(((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))) ? ((3*n-7)/2): (((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))); j_t += 1)
         for(k_t = ((((-4*j_t-n+11)/12)>(((((-8*j_t-n+3)/8)>(((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))) ? ((-8*j_t-n+3)/8): (((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))))) ? ((-4*j_t-n+11)/12): (((((-8*j_t-n+3)/8)>(((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))) ? ((-8*j_t-n+3)/8): (((((-2*j_t-n+3)/2)>(((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))) ? ((-2*j_t-n+3)/2): (((((4*j_t-n+6)/4)>(((4*j_t-3*n+28)/20))) ? ((4*j_t-n+6)/4): (((4*j_t-3*n+28)/20))))))))); k_t <= ((((j_t+4)/3)<((((j_t+2)<(((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))) ? (j_t+2): (((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))))) ? ((j_t+4)/3): ((((j_t+2)<(((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))) ? (j_t+2): (((((-j_t+1)/3)<(((-8*j_t+n-3)/8))) ? ((-j_t+1)/3): (((-8*j_t+n-3)/8))))))); k_t += 1)
            for(j_l = (((4)>((((-8*j_t-8*k_t-3)>((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))) ? (-8*j_t-8*k_t-3): ((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))))) ? (4): ((((-8*j_t-8*k_t-3)>((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))) ? (-8*j_t-8*k_t-3): ((((8*j_t-24*k_t+4)>((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))) ? (8*j_t-24*k_t+4): ((((24*j_t+24*k_t+4)>((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))) ? (24*j_t+24*k_t+4): ((((-16*k_t+4)>((-48*k_t-2*n+10))) ? (-16*k_t+4): ((-48*k_t-2*n+10))))))))))); j_l <= (((8*j_t-24*k_t+41)<((((24*j_t+24*k_t+4*n+13)<((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))) ? (24*j_t+24*k_t+4*n+13): ((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))))) ? (8*j_t-24*k_t+41): ((((24*j_t+24*k_t+4*n+13)<((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))) ? (24*j_t+24*k_t+4*n+13): ((((-8*j_t-8*k_t+4*n-8)<((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))) ? (-8*j_t-8*k_t+4*n-8): ((((-16*k_t+2*n+13)<((4*n-8))) ? (-16*k_t+2*n+13): ((4*n-8))))))))); j_l += 1)
               for(k_l = ((((-j_l-8*j_t-8*k_t-4)/4)>(((((-j_l+3)/3)>(((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))))) ? ((-j_l-8*j_t-8*k_t-4)/4): (((((-j_l+3)/3)>(((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))) ? ((-j_l+3)/3): (((((-j_l-16*k_t+3)/2)>((-n+2))) ? ((-j_l-16*k_t+3)/2): ((-n+2))))))); k_l <= ((((-j_l-8*j_t-8*k_t)/4)<(((((-j_l-16*k_t+17)/2)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-16*k_t+17)/2): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))) ? ((-j_l-8*j_t-8*k_t)/4): (((((-j_l-16*k_t+17)/2)<(((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))) ? ((-j_l-16*k_t+17)/2): (((((-j_l+n-2)/3)<((-1))) ? ((-j_l+n-2)/3): ((-1))))))); k_l += 1)
                  B[i][-k_l][j_l+3*k_l] = 0.125*(A[i+1][-k_l][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i-1][-k_l][j_l+3*k_l])+0.125*(A[i][-k_l+1][j_l+3*k_l]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l-1][j_l+3*k_l])+0.125*(A[i][-k_l][j_l+3*k_l+1]-2.0*A[i][-k_l][j_l+3*k_l]+A[i][-k_l][j_l+3*k_l-1])+A[i][-k_l][j_l+3*k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
