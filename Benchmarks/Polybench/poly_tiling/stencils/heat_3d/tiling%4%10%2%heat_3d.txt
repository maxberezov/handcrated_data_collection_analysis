GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LP
void kernel_heat_3d(int tsteps, int n, double A[40+0][40+0][40+0], double B[40+0][40+0][40+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((3*n-9)/8)<(((((3*n-9)/16)<(((7*n-21)/32))) ? ((3*n-9)/16): (((7*n-21)/32))))) ? ((3*n-9)/8): (((((3*n-9)/16)<(((7*n-21)/32))) ? ((3*n-9)/16): (((7*n-21)/32))))); j_t += 1)
         for(k_t = (((-j_t)>(((-n+10)/8))) ? (-j_t): (((-n+10)/8))); k_t <= ((((-16*j_t+n)/20)<(((-16*j_t+n-3)/16))) ? ((-16*j_t+n)/20): (((-16*j_t+n-3)/16))); k_t += 1)
            for(j_l = (((32*j_t+24*k_t+3)>((32*j_t+32*k_t+3))) ? (32*j_t+24*k_t+3): ((32*j_t+32*k_t+3))); j_l <= (((32*j_t+24*k_t+40)<((((32*j_t+32*k_t+n+30)<((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))) ? (32*j_t+32*k_t+n+30): ((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))))) ? (32*j_t+24*k_t+40): ((((32*j_t+32*k_t+n+30)<((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))) ? (32*j_t+32*k_t+n+30): ((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((j_l+8*k_t-7)/2)>(((((j_l-n+3)/2)>((16*j_t+16*k_t+1))) ? ((j_l-n+3)/2): ((16*j_t+16*k_t+1))))) ? ((j_l+8*k_t-7)/2): (((((j_l-n+3)/2)>((16*j_t+16*k_t+1))) ? ((j_l-n+3)/2): ((16*j_t+16*k_t+1))))); k_l <= ((((j_l-1)/2)<(((((j_l+8*k_t-1)/2)<((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))) ? ((j_l+8*k_t-1)/2): ((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))))) ? ((j_l-1)/2): (((((j_l+8*k_t-1)/2)<((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))) ? ((j_l+8*k_t-1)/2): ((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))))); k_l += 1)
                  B[i][j_l-2*k_l][k_l] = 0.125*(A[i+1][j_l-2*k_l][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i-1][j_l-2*k_l][k_l])+0.125*(A[i][j_l-2*k_l+1][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l-1][k_l])+0.125*(A[i][j_l-2*k_l][k_l+1]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l][k_l-1])+A[i][j_l-2*k_l][k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_heat_3d(int tsteps, int n, double A[40+0][40+0][40+0], double B[40+0][40+0][40+0])
{
   int t, i, j, k;
   //PIPS generated variable
   int j_t, k_t, j_l, k_l;

#pragma scop
   polybench_timer_start();

   for(i = 1; i <= n-1-1; i += 1)
loop_1:
      for(j_t = 0; j_t <= ((((3*n-9)/8)<(((((3*n-9)/16)<(((7*n-21)/32))) ? ((3*n-9)/16): (((7*n-21)/32))))) ? ((3*n-9)/8): (((((3*n-9)/16)<(((7*n-21)/32))) ? ((3*n-9)/16): (((7*n-21)/32))))); j_t += 1)
         for(k_t = (((-j_t)>(((-n+10)/8))) ? (-j_t): (((-n+10)/8))); k_t <= ((((-16*j_t+n)/20)<(((-16*j_t+n-3)/16))) ? ((-16*j_t+n)/20): (((-16*j_t+n-3)/16))); k_t += 1)
            for(j_l = (((32*j_t+24*k_t+3)>((32*j_t+32*k_t+3))) ? (32*j_t+24*k_t+3): ((32*j_t+32*k_t+3))); j_l <= (((32*j_t+24*k_t+40)<((((32*j_t+32*k_t+n+30)<((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))) ? (32*j_t+32*k_t+n+30): ((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))))) ? (32*j_t+24*k_t+40): ((((32*j_t+32*k_t+n+30)<((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))) ? (32*j_t+32*k_t+n+30): ((((-8*k_t+2*n+4)<((3*n-6))) ? (-8*k_t+2*n+4): ((3*n-6))))))); j_l += 1)
               for(k_l = ((((j_l+8*k_t-7)/2)>(((((j_l-n+3)/2)>((16*j_t+16*k_t+1))) ? ((j_l-n+3)/2): ((16*j_t+16*k_t+1))))) ? ((j_l+8*k_t-7)/2): (((((j_l-n+3)/2)>((16*j_t+16*k_t+1))) ? ((j_l-n+3)/2): ((16*j_t+16*k_t+1))))); k_l <= ((((j_l-1)/2)<(((((j_l+8*k_t-1)/2)<((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))) ? ((j_l+8*k_t-1)/2): ((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))))) ? ((j_l-1)/2): (((((j_l+8*k_t-1)/2)<((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))) ? ((j_l+8*k_t-1)/2): ((((16*j_t+16*k_t+16)<((n-2))) ? (16*j_t+16*k_t+16): ((n-2))))))); k_l += 1)
                  B[i][j_l-2*k_l][k_l] = 0.125*(A[i+1][j_l-2*k_l][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i-1][j_l-2*k_l][k_l])+0.125*(A[i][j_l-2*k_l+1][k_l]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l-1][k_l])+0.125*(A[i][j_l-2*k_l][k_l+1]-2.0*A[i][j_l-2*k_l][k_l]+A[i][j_l-2*k_l][k_l-1])+A[i][j_l-2*k_l][k_l];
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
