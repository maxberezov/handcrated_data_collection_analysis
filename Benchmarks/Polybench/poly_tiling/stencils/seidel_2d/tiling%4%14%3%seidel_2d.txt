GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LP
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((3*n-9)/8)<(((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))) ? ((3*n-9)/8): (((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))); i_t += 1)
         for(j_t = (((-i_t)>(((-n+18)/16))) ? (-i_t): (((-n+18)/16))); j_t <= ((((-8*i_t+n-3)/8)<((0))) ? ((-8*i_t+n-3)/8): ((0))); j_t += 1)
            for(i_l = 8*i_t-24*j_t+3; i_l <= (((8*i_t-24*j_t+40)<((((8*i_t+8*j_t+2*n+4)<((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))) ? (8*i_t+8*j_t+2*n+4): ((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))))) ? (8*i_t-24*j_t+40): ((((8*i_t+8*j_t+2*n+4)<((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))) ? (8*i_t+8*j_t+2*n+4): ((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))))); i_l += 1)
               for(j_l = ((((-i_l+8*i_t+8*j_t+2)/2)>((((16*j_t-16)>((-n+2))) ? (16*j_t-16): ((-n+2))))) ? ((-i_l+8*i_t+8*j_t+2)/2): ((((16*j_t-16)>((-n+2))) ? (16*j_t-16): ((-n+2))))); j_l <= ((((-i_l+8*i_t+8*j_t+8)/2)<(((((-i_l+n-2)/2)<((16*j_t-1))) ? ((-i_l+n-2)/2): ((16*j_t-1))))) ? ((-i_l+8*i_t+8*j_t+8)/2): (((((-i_l+n-2)/2)<((16*j_t-1))) ? ((-i_l+n-2)/2): ((16*j_t-1))))); j_l += 1)
                  A[t][-j_l][i_l+2*j_l] = (A[t-1][-j_l-1][i_l+2*j_l-1]+A[t-1][-j_l-1][i_l+2*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((3*n-9)/8)<(((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))) ? ((3*n-9)/8): (((((3*n-9)/16)<(((7*n-21)/16))) ? ((3*n-9)/16): (((7*n-21)/16))))); i_t += 1)
         for(j_t = (((-i_t)>(((-n+18)/16))) ? (-i_t): (((-n+18)/16))); j_t <= ((((-8*i_t+n-3)/8)<((0))) ? ((-8*i_t+n-3)/8): ((0))); j_t += 1)
            for(i_l = 8*i_t-24*j_t+3; i_l <= (((8*i_t-24*j_t+40)<((((8*i_t+8*j_t+2*n+4)<((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))) ? (8*i_t+8*j_t+2*n+4): ((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))))) ? (8*i_t-24*j_t+40): ((((8*i_t+8*j_t+2*n+4)<((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))) ? (8*i_t+8*j_t+2*n+4): ((((-32*j_t+n+30)<((3*n-6))) ? (-32*j_t+n+30): ((3*n-6))))))); i_l += 1)
               for(j_l = ((((-i_l+8*i_t+8*j_t+2)/2)>((((16*j_t-16)>((-n+2))) ? (16*j_t-16): ((-n+2))))) ? ((-i_l+8*i_t+8*j_t+2)/2): ((((16*j_t-16)>((-n+2))) ? (16*j_t-16): ((-n+2))))); j_l <= ((((-i_l+8*i_t+8*j_t+8)/2)<(((((-i_l+n-2)/2)<((16*j_t-1))) ? ((-i_l+n-2)/2): ((16*j_t-1))))) ? ((-i_l+8*i_t+8*j_t+8)/2): (((((-i_l+n-2)/2)<((16*j_t-1))) ? ((-i_l+n-2)/2): ((16*j_t-1))))); j_l += 1)
                  A[t][-j_l][i_l+2*j_l] = (A[t-1][-j_l-1][i_l+2*j_l-1]+A[t-1][-j_l-1][i_l+2*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
