GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((3*n+21)/32)<(((n-3)/16))) ? ((3*n+21)/32): (((n-3)/16))); i_t += 1)
         for(j_t = (((-i_t-1)>(((((16*i_t-n+3)/16)>(((-n+3)/32))) ? ((16*i_t-n+3)/16): (((-n+3)/32))))) ? (-i_t-1): (((((16*i_t-n+3)/16)>(((-n+3)/32))) ? ((16*i_t-n+3)/16): (((-n+3)/32))))); j_t <= (((i_t)<(((-16*i_t+n-3)/16))) ? (i_t): (((-16*i_t+n-3)/16))); j_t += 1)
            for(i_l = (((1)>((((16*i_t+16*j_t+1)>((32*i_t-n+4))) ? (16*i_t+16*j_t+1): ((32*i_t-n+4))))) ? (1): ((((16*i_t+16*j_t+1)>((32*i_t-n+4))) ? (16*i_t+16*j_t+1): ((32*i_t-n+4))))); i_l <= (((16*i_t+16*j_t+32)<((((32*j_t+n+29)<((n-2))) ? (32*j_t+n+29): ((n-2))))) ? (16*i_t+16*j_t+32): ((((32*j_t+n+29)<((n-2))) ? (32*j_t+n+29): ((n-2))))); i_l += 1)
               for(j_l = (((-i_l+32*i_t+2)>((((i_l-32*j_t-31)>((1))) ? (i_l-32*j_t-31): ((1))))) ? (-i_l+32*i_t+2): ((((i_l-32*j_t-31)>((1))) ? (i_l-32*j_t-31): ((1))))); j_l <= (((-i_l+32*i_t+33)<((((i_l-32*j_t)<((n-2))) ? (i_l-32*j_t): ((n-2))))) ? (-i_l+32*i_t+33): ((((i_l-32*j_t)<((n-2))) ? (i_l-32*j_t): ((n-2))))); j_l += 1)
                  A[t][i_l][j_l] = (A[t-1][i_l-1][j_l-1]+A[t-1][i_l-1][j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((3*n+21)/32)<(((n-3)/16))) ? ((3*n+21)/32): (((n-3)/16))); i_t += 1)
         for(j_t = (((-i_t-1)>(((((16*i_t-n+3)/16)>(((-n+3)/32))) ? ((16*i_t-n+3)/16): (((-n+3)/32))))) ? (-i_t-1): (((((16*i_t-n+3)/16)>(((-n+3)/32))) ? ((16*i_t-n+3)/16): (((-n+3)/32))))); j_t <= (((i_t)<(((-16*i_t+n-3)/16))) ? (i_t): (((-16*i_t+n-3)/16))); j_t += 1)
            for(i_l = (((1)>((((16*i_t+16*j_t+1)>((32*i_t-n+4))) ? (16*i_t+16*j_t+1): ((32*i_t-n+4))))) ? (1): ((((16*i_t+16*j_t+1)>((32*i_t-n+4))) ? (16*i_t+16*j_t+1): ((32*i_t-n+4))))); i_l <= (((16*i_t+16*j_t+32)<((((32*j_t+n+29)<((n-2))) ? (32*j_t+n+29): ((n-2))))) ? (16*i_t+16*j_t+32): ((((32*j_t+n+29)<((n-2))) ? (32*j_t+n+29): ((n-2))))); i_l += 1)
               for(j_l = (((-i_l+32*i_t+2)>((((i_l-32*j_t-31)>((1))) ? (i_l-32*j_t-31): ((1))))) ? (-i_l+32*i_t+2): ((((i_l-32*j_t-31)>((1))) ? (i_l-32*j_t-31): ((1))))); j_l <= (((-i_l+32*i_t+33)<((((i_l-32*j_t)<((n-2))) ? (i_l-32*j_t): ((n-2))))) ? (-i_l+32*i_t+33): ((((i_l-32*j_t)<((n-2))) ? (i_l-32*j_t): ((n-2))))); j_l += 1)
                  A[t][i_l][j_l] = (A[t-1][i_l-1][j_l-1]+A[t-1][i_l-1][j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
