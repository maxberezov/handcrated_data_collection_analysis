GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LI
void kernel_seidel_2d(int tsteps, int n, double A[40+0][40+0][40+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-3*n-21)/32)>(((((-n-13)/32)>(((-n-14)/16))) ? ((-n-13)/32): (((-n-14)/16))))) ? ((-3*n-21)/32): (((((-n-13)/32)>(((-n-14)/16))) ? ((-n-13)/32): (((-n-14)/16))))); i_t <= ((((3*n+7)/16)<(((((5*n-1)/32)<(((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))) ? ((5*n-1)/32): (((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))))) ? ((3*n+7)/16): (((((5*n-1)/32)<(((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))) ? ((5*n-1)/32): (((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))))); i_t += 1)
         for(j_t = ((((-16*i_t-n+3)/16)>(((((-8*i_t-n+19)/24)>(((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))) ? ((-8*i_t-n+19)/24): (((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))))) ? ((-16*i_t-n+3)/16): (((((-8*i_t-n+19)/24)>(((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))) ? ((-8*i_t-n+19)/24): (((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))))); j_t <= (((i_t+2)<(((((-i_t+1)/3)<(((-16*i_t+n-3)/16))) ? ((-i_t+1)/3): (((-16*i_t+n-3)/16))))) ? (i_t+2): (((((-i_t+1)/3)<(((-16*i_t+n-3)/16))) ? ((-i_t+1)/3): (((-16*i_t+n-3)/16))))); j_t += 1)
            for(i_l = (((1)>((((8*i_t-8*j_t+1)>((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))) ? (8*i_t-8*j_t+1): ((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))))) ? (1): ((((8*i_t-8*j_t+1)>((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))) ? (8*i_t-8*j_t+1): ((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))))); i_l <= (((8*i_t-8*j_t+24)<((((16*i_t+16*j_t+n+13)<((n-2))) ? (16*i_t+16*j_t+n+13): ((n-2))))) ? (8*i_t-8*j_t+24): ((((16*i_t+16*j_t+n+13)<((n-2))) ? (16*i_t+16*j_t+n+13): ((n-2))))); i_l += 1)
               for(j_l = (((i_l-16*i_t-16*j_t-15)>((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))) ? (i_l-16*i_t-16*j_t-15): ((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))); j_l <= (((i_l-16*i_t-16*j_t)<((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))) ? (i_l-16*i_t-16*j_t): ((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))); j_l += 1)
                  A[t][i_l][j_l] = (A[t-1][i_l-1][j_l-1]+A[t-1][i_l-1][j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[40+0][40+0][40+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-3*n-21)/32)>(((((-n-13)/32)>(((-n-14)/16))) ? ((-n-13)/32): (((-n-14)/16))))) ? ((-3*n-21)/32): (((((-n-13)/32)>(((-n-14)/16))) ? ((-n-13)/32): (((-n-14)/16))))); i_t <= ((((3*n+7)/16)<(((((5*n-1)/32)<(((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))) ? ((5*n-1)/32): (((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))))) ? ((3*n+7)/16): (((((5*n-1)/32)<(((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))) ? ((5*n-1)/32): (((((n-3)/8)<(((3*n-9)/32))) ? ((n-3)/8): (((3*n-9)/32))))))); i_t += 1)
         for(j_t = ((((-16*i_t-n+3)/16)>(((((-8*i_t-n+19)/24)>(((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))) ? ((-8*i_t-n+19)/24): (((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))))) ? ((-16*i_t-n+3)/16): (((((-8*i_t-n+19)/24)>(((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))) ? ((-8*i_t-n+19)/24): (((((8*i_t-n+10)/8)>(((-n+18)/16))) ? ((8*i_t-n+10)/8): (((-n+18)/16))))))); j_t <= (((i_t+2)<(((((-i_t+1)/3)<(((-16*i_t+n-3)/16))) ? ((-i_t+1)/3): (((-16*i_t+n-3)/16))))) ? (i_t+2): (((((-i_t+1)/3)<(((-16*i_t+n-3)/16))) ? ((-i_t+1)/3): (((-16*i_t+n-3)/16))))); j_t += 1)
            for(i_l = (((1)>((((8*i_t-8*j_t+1)>((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))) ? (8*i_t-8*j_t+1): ((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))))) ? (1): ((((8*i_t-8*j_t+1)>((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))) ? (8*i_t-8*j_t+1): ((((16*i_t+16*j_t+1)>((-32*j_t-n+4))) ? (16*i_t+16*j_t+1): ((-32*j_t-n+4))))))); i_l <= (((8*i_t-8*j_t+24)<((((16*i_t+16*j_t+n+13)<((n-2))) ? (16*i_t+16*j_t+n+13): ((n-2))))) ? (8*i_t-8*j_t+24): ((((16*i_t+16*j_t+n+13)<((n-2))) ? (16*i_t+16*j_t+n+13): ((n-2))))); i_l += 1)
               for(j_l = (((i_l-16*i_t-16*j_t-15)>((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))) ? (i_l-16*i_t-16*j_t-15): ((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))); j_l <= (((i_l-16*i_t-16*j_t)<((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))) ? (i_l-16*i_t-16*j_t): ((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))); j_l += 1)
                  A[t][i_l][j_l] = (A[t-1][i_l-1][j_l-1]+A[t-1][i_l-1][j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
