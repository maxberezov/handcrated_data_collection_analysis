GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LS
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((n+4)/2)<(((n-3)/4))) ? ((n+4)/2): (((n-3)/4))); i_t += 1)
         for(j_t = ((((-i_t-1)/4)>(((4*i_t-n+3)/16))) ? ((-i_t-1)/4): (((4*i_t-n+3)/16))); j_t <= (((i_t/4)<(((-4*i_t+n-3)/16))) ? (i_t/4): (((-4*i_t+n-3)/16))); j_t += 1)
            for(i_l = (((8*i_t+2)>((-32*j_t-29))) ? (8*i_t+2): ((-32*j_t-29))); i_l <= (((8*i_t+9)<((((32*j_t+2*n+27)<((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))) ? (32*j_t+2*n+27): ((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))))) ? (8*i_t+9): ((((32*j_t+2*n+27)<((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))) ? (32*j_t+2*n+27): ((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))))); i_l += 1)
               for(j_l = (((-i_l+1)>(((((-i_l-32*j_t-30)/2)>((-n+2))) ? ((-i_l-32*j_t-30)/2): ((-n+2))))) ? (-i_l+1): (((((-i_l-32*j_t-30)/2)>((-n+2))) ? ((-i_l-32*j_t-30)/2): ((-n+2))))); j_l <= ((((-i_l-32*j_t)/2)<((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))) ? ((-i_l-32*j_t)/2): ((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))); j_l += 1)
                  A[t][-j_l][i_l+j_l] = (A[t-1][-j_l-1][i_l+j_l-1]+A[t-1][-j_l-1][i_l+j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((n+4)/2)<(((n-3)/4))) ? ((n+4)/2): (((n-3)/4))); i_t += 1)
         for(j_t = ((((-i_t-1)/4)>(((4*i_t-n+3)/16))) ? ((-i_t-1)/4): (((4*i_t-n+3)/16))); j_t <= (((i_t/4)<(((-4*i_t+n-3)/16))) ? (i_t/4): (((-4*i_t+n-3)/16))); j_t += 1)
            for(i_l = (((8*i_t+2)>((-32*j_t-29))) ? (8*i_t+2): ((-32*j_t-29))); i_l <= (((8*i_t+9)<((((32*j_t+2*n+27)<((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))) ? (32*j_t+2*n+27): ((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))))) ? (8*i_t+9): ((((32*j_t+2*n+27)<((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))) ? (32*j_t+2*n+27): ((((-32*j_t+2*n-4)<((2*n-4))) ? (-32*j_t+2*n-4): ((2*n-4))))))); i_l += 1)
               for(j_l = (((-i_l+1)>(((((-i_l-32*j_t-30)/2)>((-n+2))) ? ((-i_l-32*j_t-30)/2): ((-n+2))))) ? (-i_l+1): (((((-i_l-32*j_t-30)/2)>((-n+2))) ? ((-i_l-32*j_t-30)/2): ((-n+2))))); j_l <= ((((-i_l-32*j_t)/2)<((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))) ? ((-i_l-32*j_t)/2): ((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))); j_l += 1)
                  A[t][-j_l][i_l+j_l] = (A[t-1][-j_l-1][i_l+j_l-1]+A[t-1][-j_l-1][i_l+j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
