GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_seidel_2d(int tsteps, int n, double A[4000+0][4000+0][4000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((n-3)/16)<(((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))) ? ((n-3)/16): (((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))); i_t += 1)
         for(j_t = 16*i_t-n+3; j_t <= (n-3)/4; j_t += 1)
            for(i_l = (((64*i_t+5)>((64*i_t+4*j_t+5))) ? (64*i_t+5): ((64*i_t+4*j_t+5))); i_l <= (((64*i_t+4*j_t+68)<((((64*i_t+n+62)<((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))) ? (64*i_t+n+62): ((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))))) ? (64*i_t+4*j_t+68): ((((64*i_t+n+62)<((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))) ? (64*i_t+n+62): ((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))))); i_l += 1)
               for(j_l = ((((-i_l+4)/4)>(((-i_l+4*j_t+4)/4))) ? ((-i_l+4)/4): (((-i_l+4*j_t+4)/4))); j_l <= ((((-i_l+4*j_t+4)/4)<(((-i_l+n-2)/4))) ? ((-i_l+4*j_t+4)/4): (((-i_l+n-2)/4))); j_l += 1)
                  A[t][-j_l][i_l+4*j_l] = (A[t-1][-j_l-1][i_l+4*j_l-1]+A[t-1][-j_l-1][i_l+4*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[4000+0][4000+0][4000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((n-3)/16)<(((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))) ? ((n-3)/16): (((((5*n-15)/64)<(((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))) ? ((5*n-15)/64): (((((9*n-27)/64)<(((9*n-27)/128))) ? ((9*n-27)/64): (((9*n-27)/128))))))); i_t += 1)
         for(j_t = 16*i_t-n+3; j_t <= (n-3)/4; j_t += 1)
            for(i_l = (((64*i_t+5)>((64*i_t+4*j_t+5))) ? (64*i_t+5): ((64*i_t+4*j_t+5))); i_l <= (((64*i_t+4*j_t+68)<((((64*i_t+n+62)<((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))) ? (64*i_t+n+62): ((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))))) ? (64*i_t+4*j_t+68): ((((64*i_t+n+62)<((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))) ? (64*i_t+n+62): ((((4*j_t+4*n-4)<((5*n-10))) ? (4*j_t+4*n-4): ((5*n-10))))))); i_l += 1)
               for(j_l = ((((-i_l+4)/4)>(((-i_l+4*j_t+4)/4))) ? ((-i_l+4)/4): (((-i_l+4*j_t+4)/4))); j_l <= ((((-i_l+4*j_t+4)/4)<(((-i_l+n-2)/4))) ? ((-i_l+4*j_t+4)/4): (((-i_l+n-2)/4))); j_l += 1)
                  A[t][-j_l][i_l+4*j_l] = (A[t-1][-j_l-1][i_l+4*j_l-1]+A[t-1][-j_l-1][i_l+4*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
