GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LI
void kernel_seidel_2d(int tsteps, int n, double A[120+0][120+0][120+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-3*n-40)/16)>(((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))) ? ((-3*n-40)/16): (((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))); i_t <= ((((5*n+33)/16)<(((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((5*n+33)/16): (((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))); i_t += 1)
         for(j_t = ((((-4*i_t-n+19)/20)>(((((-8*i_t-n+3)/8)>(((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*i_t-n+19)/20): (((((-8*i_t-n+3)/8)>(((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))))); j_t <= ((((i_t+4)/3)<(((((-i_t+3)/5)<(((-8*i_t+n-3)/8))) ? ((-i_t+3)/5): (((-8*i_t+n-3)/8))))) ? ((i_t+4)/3): (((((-i_t+3)/5)<(((-8*i_t+n-3)/8))) ? ((-i_t+3)/5): (((-8*i_t+n-3)/8))))); j_t += 1)
            for(i_l = (((1)>((((4*i_t-12*j_t+1)>((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))) ? (4*i_t-12*j_t+1): ((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))))) ? (1): ((((4*i_t-12*j_t+1)>((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))) ? (4*i_t-12*j_t+1): ((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))))); i_l <= (((4*i_t-12*j_t+20)<((((8*i_t+8*j_t+n+5)<((n-2))) ? (8*i_t+8*j_t+n+5): ((n-2))))) ? (4*i_t-12*j_t+20): ((((8*i_t+8*j_t+n+5)<((n-2))) ? (8*i_t+8*j_t+n+5): ((n-2))))); i_l += 1)
               for(j_l = (((i_l-8*i_t-8*j_t-7)>((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))) ? (i_l-8*i_t-8*j_t-7): ((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))); j_l <= (((i_l-8*i_t-8*j_t)<((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))) ? (i_l-8*i_t-8*j_t): ((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))); j_l += 1)
                  A[t][i_l][j_l] = (A[t-1][i_l-1][j_l-1]+A[t-1][i_l-1][j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[120+0][120+0][120+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-3*n-40)/16)>(((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))) ? ((-3*n-40)/16): (((((-5*n-13)/32)>(((-3*n-13)/32))) ? ((-5*n-13)/32): (((-3*n-13)/32))))); i_t <= ((((5*n+33)/16)<(((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))) ? ((5*n+33)/16): (((((3*n-9)/16)<(((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))) ? ((3*n-9)/16): (((((7*n-15)/32)<(((5*n-15)/32))) ? ((7*n-15)/32): (((5*n-15)/32))))))); i_t += 1)
         for(j_t = ((((-4*i_t-n+19)/20)>(((((-8*i_t-n+3)/8)>(((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))))) ? ((-4*i_t-n+19)/20): (((((-8*i_t-n+3)/8)>(((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+14)/12)>(((-n+18)/16))) ? ((4*i_t-n+14)/12): (((-n+18)/16))))))); j_t <= ((((i_t+4)/3)<(((((-i_t+3)/5)<(((-8*i_t+n-3)/8))) ? ((-i_t+3)/5): (((-8*i_t+n-3)/8))))) ? ((i_t+4)/3): (((((-i_t+3)/5)<(((-8*i_t+n-3)/8))) ? ((-i_t+3)/5): (((-8*i_t+n-3)/8))))); j_t += 1)
            for(i_l = (((1)>((((4*i_t-12*j_t+1)>((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))) ? (4*i_t-12*j_t+1): ((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))))) ? (1): ((((4*i_t-12*j_t+1)>((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))) ? (4*i_t-12*j_t+1): ((((8*i_t+8*j_t+1)>((-32*j_t-n+4))) ? (8*i_t+8*j_t+1): ((-32*j_t-n+4))))))); i_l <= (((4*i_t-12*j_t+20)<((((8*i_t+8*j_t+n+5)<((n-2))) ? (8*i_t+8*j_t+n+5): ((n-2))))) ? (4*i_t-12*j_t+20): ((((8*i_t+8*j_t+n+5)<((n-2))) ? (8*i_t+8*j_t+n+5): ((n-2))))); i_l += 1)
               for(j_l = (((i_l-8*i_t-8*j_t-7)>((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))) ? (i_l-8*i_t-8*j_t-7): ((((-i_l-32*j_t+2)>((1))) ? (-i_l-32*j_t+2): ((1))))); j_l <= (((i_l-8*i_t-8*j_t)<((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))) ? (i_l-8*i_t-8*j_t): ((((-i_l-32*j_t+33)<((n-2))) ? (-i_l-32*j_t+33): ((n-2))))); j_l += 1)
                  A[t][i_l][j_l] = (A[t-1][i_l-1][j_l-1]+A[t-1][i_l-1][j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
