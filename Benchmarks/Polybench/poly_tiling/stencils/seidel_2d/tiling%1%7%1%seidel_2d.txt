GENERATED TILE DIRECTION=TI - LOCAL TILE DIRECTION=LP
void kernel_seidel_2d(int tsteps, int n, double A[120+0][120+0][120+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((7*n-1)/16)<((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))) ? ((7*n-1)/16): ((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))); i_t += 1)
         for(j_t = (((-2*i_t-2)>(((((8*i_t-n+3)/4)>(((-n+3)/8))) ? ((8*i_t-n+3)/4): (((-n+3)/8))))) ? (-2*i_t-2): (((((8*i_t-n+3)/4)>(((-n+3)/8))) ? ((8*i_t-n+3)/4): (((-n+3)/8))))); j_t <= (((2*i_t+1)<(((((8*i_t+n+4)/12)<(((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))) ? ((8*i_t+n+4)/12): (((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))))) ? (2*i_t+1): (((((8*i_t+n+4)/12)<(((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))) ? ((8*i_t+n+4)/12): (((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))))); j_t += 1)
            for(i_l = (((16*i_t+4)>((((32*i_t+8*j_t+4)>((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))) ? (32*i_t+8*j_t+4): ((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))))) ? (16*i_t+4): ((((32*i_t+8*j_t+4)>((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))) ? (32*i_t+8*j_t+4): ((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))))); i_l <= (((32*i_t+8*j_t+41)<((((16*i_t+2*n+13)<((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))) ? (16*i_t+2*n+13): ((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))))) ? (32*i_t+8*j_t+41): ((((16*i_t+2*n+13)<((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))) ? (16*i_t+2*n+13): ((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))))); i_l += 1)
               for(j_l = ((((-i_l+16*i_t+3)/2)>(((((-i_l+3)/3)>(((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))))) ? ((-i_l+16*i_t+3)/2): (((((-i_l+3)/3)>(((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))))); j_l <= ((((-i_l+16*i_t+17)/2)<(((((-i_l-8*j_t)/4)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-8*j_t)/4): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))) ? ((-i_l+16*i_t+17)/2): (((((-i_l-8*j_t)/4)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-8*j_t)/4): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))); j_l += 1)
                  A[t][-j_l][i_l+3*j_l] = (A[t-1][-j_l-1][i_l+3*j_l-1]+A[t-1][-j_l-1][i_l+3*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[120+0][120+0][120+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((7*n-1)/16)<((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))) ? ((7*n-1)/16): ((((n-2)<(((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))) ? (n-2): (((((n-3)/2)<(((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))) ? ((n-3)/2): (((((n-3)/8)<(((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))) ? ((n-3)/8): (((((3*n-7)/8)<(((5*n-13)/24))) ? ((3*n-7)/8): (((5*n-13)/24))))))))))); i_t += 1)
         for(j_t = (((-2*i_t-2)>(((((8*i_t-n+3)/4)>(((-n+3)/8))) ? ((8*i_t-n+3)/4): (((-n+3)/8))))) ? (-2*i_t-2): (((((8*i_t-n+3)/4)>(((-n+3)/8))) ? ((8*i_t-n+3)/4): (((-n+3)/8))))); j_t <= (((2*i_t+1)<(((((8*i_t+n+4)/12)<(((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))) ? ((8*i_t+n+4)/12): (((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))))) ? (2*i_t+1): (((((8*i_t+n+4)/12)<(((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))) ? ((8*i_t+n+4)/12): (((((-8*i_t+n-3)/4)<(((n-3)/8))) ? ((-8*i_t+n-3)/4): (((n-3)/8))))))); j_t += 1)
            for(i_l = (((16*i_t+4)>((((32*i_t+8*j_t+4)>((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))) ? (32*i_t+8*j_t+4): ((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))))) ? (16*i_t+4): ((((32*i_t+8*j_t+4)>((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))) ? (32*i_t+8*j_t+4): ((((48*i_t-2*n+10)>((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))) ? (48*i_t-2*n+10): ((((-8*j_t-3)>((24*j_t+4))) ? (-8*j_t-3): ((24*j_t+4))))))))); i_l <= (((32*i_t+8*j_t+41)<((((16*i_t+2*n+13)<((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))) ? (16*i_t+2*n+13): ((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))))) ? (32*i_t+8*j_t+41): ((((16*i_t+2*n+13)<((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))) ? (16*i_t+2*n+13): ((((24*j_t+4*n+13)<((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))) ? (24*j_t+4*n+13): ((((-8*j_t+4*n-8)<((4*n-8))) ? (-8*j_t+4*n-8): ((4*n-8))))))))); i_l += 1)
               for(j_l = ((((-i_l+16*i_t+3)/2)>(((((-i_l+3)/3)>(((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))))) ? ((-i_l+16*i_t+3)/2): (((((-i_l+3)/3)>(((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-8*j_t-4)/4)>((-n+2))) ? ((-i_l-8*j_t-4)/4): ((-n+2))))))); j_l <= ((((-i_l+16*i_t+17)/2)<(((((-i_l-8*j_t)/4)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-8*j_t)/4): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))) ? ((-i_l+16*i_t+17)/2): (((((-i_l-8*j_t)/4)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-8*j_t)/4): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))); j_l += 1)
                  A[t][-j_l][i_l+3*j_l] = (A[t-1][-j_l-1][i_l+3*j_l-1]+A[t-1][-j_l-1][i_l+3*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
