GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LP
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((5*n-15)/4)<(((((5*n-15)/16)<(((21*n-63)/16))) ? ((5*n-15)/16): (((21*n-63)/16))))) ? ((5*n-15)/4): (((((5*n-15)/16)<(((21*n-63)/16))) ? ((5*n-15)/16): (((21*n-63)/16))))); i_t += 1)
         for(j_t = (((-i_t)>(((-n+18)/16))) ? (-i_t): (((-n+18)/16))); j_t <= ((((-4*i_t+n+57)/68)<(((-4*i_t+n-3)/4))) ? ((-4*i_t+n+57)/68): (((-4*i_t+n-3)/4))); j_t += 1)
            for(i_l = (((4*i_t-60*j_t+5)>((4*i_t+4*j_t+5))) ? (4*i_t-60*j_t+5): ((4*i_t+4*j_t+5))); i_l <= (((4*i_t-60*j_t+68)<((((4*i_t+4*j_t+4*n-4)<((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))) ? (4*i_t+4*j_t+4*n-4): ((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))))) ? (4*i_t-60*j_t+68): ((((4*i_t+4*j_t+4*n-4)<((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))) ? (4*i_t+4*j_t+4*n-4): ((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))))); i_l += 1)
               for(j_l = (-i_l+4*i_t+4*j_t+4)/4; j_l <= ((((-i_l+4*i_t+4*j_t+4)/4)<(((-i_l+n-2)/4))) ? ((-i_l+4*i_t+4*j_t+4)/4): (((-i_l+n-2)/4))); j_l += 1)
                  A[t][-j_l][i_l+4*j_l] = (A[t-1][-j_l-1][i_l+4*j_l-1]+A[t-1][-j_l-1][i_l+4*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = 0; i_t <= ((((5*n-15)/4)<(((((5*n-15)/16)<(((21*n-63)/16))) ? ((5*n-15)/16): (((21*n-63)/16))))) ? ((5*n-15)/4): (((((5*n-15)/16)<(((21*n-63)/16))) ? ((5*n-15)/16): (((21*n-63)/16))))); i_t += 1)
         for(j_t = (((-i_t)>(((-n+18)/16))) ? (-i_t): (((-n+18)/16))); j_t <= ((((-4*i_t+n+57)/68)<(((-4*i_t+n-3)/4))) ? ((-4*i_t+n+57)/68): (((-4*i_t+n-3)/4))); j_t += 1)
            for(i_l = (((4*i_t-60*j_t+5)>((4*i_t+4*j_t+5))) ? (4*i_t-60*j_t+5): ((4*i_t+4*j_t+5))); i_l <= (((4*i_t-60*j_t+68)<((((4*i_t+4*j_t+4*n-4)<((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))) ? (4*i_t+4*j_t+4*n-4): ((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))))) ? (4*i_t-60*j_t+68): ((((4*i_t+4*j_t+4*n-4)<((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))) ? (4*i_t+4*j_t+4*n-4): ((((-64*j_t+n+62)<((5*n-10))) ? (-64*j_t+n+62): ((5*n-10))))))); i_l += 1)
               for(j_l = (-i_l+4*i_t+4*j_t+4)/4; j_l <= ((((-i_l+4*i_t+4*j_t+4)/4)<(((-i_l+n-2)/4))) ? ((-i_l+4*i_t+4*j_t+4)/4): (((-i_l+n-2)/4))); j_l += 1)
                  A[t][-j_l][i_l+4*j_l] = (A[t-1][-j_l-1][i_l+4*j_l-1]+A[t-1][-j_l-1][i_l+4*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
