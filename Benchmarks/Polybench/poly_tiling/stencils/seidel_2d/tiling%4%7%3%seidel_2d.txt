GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LP
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-7*n-13)/16)>(((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))) ? ((-7*n-13)/16): (((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))); i_t <= ((((3*n-7)/2)<(((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))) ? ((3*n-7)/2): (((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))); i_t += 1)
         for(j_t = ((((-4*i_t-n+11)/12)>(((((-8*i_t-n+3)/8)>(((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))) ? ((-8*i_t-n+3)/8): (((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))))) ? ((-4*i_t-n+11)/12): (((((-8*i_t-n+3)/8)>(((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))) ? ((-8*i_t-n+3)/8): (((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))))); j_t <= ((((i_t+4)/3)<((((i_t+2)<(((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))) ? (i_t+2): (((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))))) ? ((i_t+4)/3): ((((i_t+2)<(((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))) ? (i_t+2): (((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))))); j_t += 1)
            for(i_l = (((4)>((((-8*i_t-8*j_t-3)>((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))) ? (-8*i_t-8*j_t-3): ((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))))) ? (4): ((((-8*i_t-8*j_t-3)>((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))) ? (-8*i_t-8*j_t-3): ((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))))); i_l <= (((8*i_t-24*j_t+41)<((((24*i_t+24*j_t+4*n+13)<((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))) ? (24*i_t+24*j_t+4*n+13): ((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))))) ? (8*i_t-24*j_t+41): ((((24*i_t+24*j_t+4*n+13)<((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))) ? (24*i_t+24*j_t+4*n+13): ((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))))); i_l += 1)
               for(j_l = ((((-i_l-8*i_t-8*j_t-4)/4)>(((((-i_l+3)/3)>(((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))))) ? ((-i_l-8*i_t-8*j_t-4)/4): (((((-i_l+3)/3)>(((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))))); j_l <= ((((-i_l-8*i_t-8*j_t)/4)<(((((-i_l-16*j_t+17)/2)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-16*j_t+17)/2): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))) ? ((-i_l-8*i_t-8*j_t)/4): (((((-i_l-16*j_t+17)/2)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-16*j_t+17)/2): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))); j_l += 1)
                  A[t][-j_l][i_l+3*j_l] = (A[t-1][-j_l-1][i_l+3*j_l-1]+A[t-1][-j_l-1][i_l+3*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[2000+0][2000+0][2000+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-7*n-13)/16)>(((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))) ? ((-7*n-13)/16): (((((-3*n-5)/16)>(((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))) ? ((-n-5)/16): (((((-n+1)/4)>(((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))) ? ((-n+1)/4): (((((-3*n+7)/4)>(((-11*n+23)/8))) ? ((-3*n+7)/4): (((-11*n+23)/8))))))))))); i_t <= ((((3*n-7)/2)<(((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))) ? ((3*n-7)/2): (((((9*n-7)/16)<(((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))) ? ((9*n-7)/16): (((((3*n-9)/16)<(((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))) ? ((3*n-9)/16): (((((5*n-15)/16)<(((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))) ? ((5*n-15)/16): (((((7*n-18)/8)<(((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))) ? ((7*n-18)/8): (((((11*n-33)/48)<(((13*n-39)/24))) ? ((11*n-33)/48): (((13*n-39)/24))))))))))))); i_t += 1)
         for(j_t = ((((-4*i_t-n+11)/12)>(((((-8*i_t-n+3)/8)>(((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))) ? ((-8*i_t-n+3)/8): (((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))))) ? ((-4*i_t-n+11)/12): (((((-8*i_t-n+3)/8)>(((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))) ? ((-8*i_t-n+3)/8): (((((-2*i_t-n+3)/2)>(((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))) ? ((-2*i_t-n+3)/2): (((((4*i_t-n+6)/4)>(((4*i_t-3*n+28)/20))) ? ((4*i_t-n+6)/4): (((4*i_t-3*n+28)/20))))))))); j_t <= ((((i_t+4)/3)<((((i_t+2)<(((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))) ? (i_t+2): (((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))))) ? ((i_t+4)/3): ((((i_t+2)<(((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))) ? (i_t+2): (((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))))); j_t += 1)
            for(i_l = (((4)>((((-8*i_t-8*j_t-3)>((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))) ? (-8*i_t-8*j_t-3): ((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))))) ? (4): ((((-8*i_t-8*j_t-3)>((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))) ? (-8*i_t-8*j_t-3): ((((8*i_t-24*j_t+4)>((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))) ? (8*i_t-24*j_t+4): ((((24*i_t+24*j_t+4)>((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))) ? (24*i_t+24*j_t+4): ((((-16*j_t+4)>((-48*j_t-2*n+10))) ? (-16*j_t+4): ((-48*j_t-2*n+10))))))))))); i_l <= (((8*i_t-24*j_t+41)<((((24*i_t+24*j_t+4*n+13)<((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))) ? (24*i_t+24*j_t+4*n+13): ((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))))) ? (8*i_t-24*j_t+41): ((((24*i_t+24*j_t+4*n+13)<((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))) ? (24*i_t+24*j_t+4*n+13): ((((-8*i_t-8*j_t+4*n-8)<((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))) ? (-8*i_t-8*j_t+4*n-8): ((((-16*j_t+2*n+13)<((4*n-8))) ? (-16*j_t+2*n+13): ((4*n-8))))))))); i_l += 1)
               for(j_l = ((((-i_l-8*i_t-8*j_t-4)/4)>(((((-i_l+3)/3)>(((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))))) ? ((-i_l-8*i_t-8*j_t-4)/4): (((((-i_l+3)/3)>(((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))) ? ((-i_l+3)/3): (((((-i_l-16*j_t+3)/2)>((-n+2))) ? ((-i_l-16*j_t+3)/2): ((-n+2))))))); j_l <= ((((-i_l-8*i_t-8*j_t)/4)<(((((-i_l-16*j_t+17)/2)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-16*j_t+17)/2): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))) ? ((-i_l-8*i_t-8*j_t)/4): (((((-i_l-16*j_t+17)/2)<(((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))) ? ((-i_l-16*j_t+17)/2): (((((-i_l+n-2)/3)<((-1))) ? ((-i_l+n-2)/3): ((-1))))))); j_l += 1)
                  A[t][-j_l][i_l+3*j_l] = (A[t-1][-j_l-1][i_l+3*j_l-1]+A[t-1][-j_l-1][i_l+3*j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
