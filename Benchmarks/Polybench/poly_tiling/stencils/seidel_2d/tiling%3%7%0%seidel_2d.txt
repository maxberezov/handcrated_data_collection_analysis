GENERATED TILE DIRECTION=TP - LOCAL TILE DIRECTION=LS
void kernel_seidel_2d(int tsteps, int n, double A[40+0][40+0][40+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-3*n-5)/16)>(((((-n-5)/16)>(((-3*n+3)/8))) ? ((-n-5)/16): (((-3*n+3)/8))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((-3*n+3)/8))) ? ((-n-5)/16): (((-3*n+3)/8))))); i_t <= ((((n-3)/2)<(((((n-3)/4)<(((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))) ? ((n-3)/4): (((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))))) ? ((n-3)/2): (((((n-3)/4)<(((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))) ? ((n-3)/4): (((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))))); i_t += 1)
         for(j_t = ((((-4*i_t-n+11)/12)>(((((-4*i_t-n+3)/4)>(((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))) ? ((-4*i_t-n+3)/4): (((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))))) ? ((-4*i_t-n+11)/12): (((((-4*i_t-n+3)/4)>(((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))) ? ((-4*i_t-n+3)/4): (((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))))); j_t <= (((i_t+2)<(((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))) ? (i_t+2): (((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))); j_t += 1)
            for(i_l = (((2)>((((-8*i_t-8*j_t-5)>((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))) ? (-8*i_t-8*j_t-5): ((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))))) ? (2): ((((-8*i_t-8*j_t-5)>((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))) ? (-8*i_t-8*j_t-5): ((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))))); i_l <= (((8*i_t+8*j_t+2*n+3)<((((-8*i_t-8*j_t+2*n-4)<((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))) ? (-8*i_t-8*j_t+2*n-4): ((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))))) ? (8*i_t+8*j_t+2*n+3): ((((-8*i_t-8*j_t+2*n-4)<((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))) ? (-8*i_t-8*j_t+2*n-4): ((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))))); i_l += 1)
               for(j_l = ((((-i_l-8*i_t-8*j_t-6)/2)>((((-i_l+1)>((-n+2))) ? (-i_l+1): ((-n+2))))) ? ((-i_l-8*i_t-8*j_t-6)/2): ((((-i_l+1)>((-n+2))) ? (-i_l+1): ((-n+2))))); j_l <= ((((-i_l-8*i_t-8*j_t)/2)<((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))) ? ((-i_l-8*i_t-8*j_t)/2): ((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))); j_l += 1)
                  A[t][-j_l][i_l+j_l] = (A[t-1][-j_l-1][i_l+j_l-1]+A[t-1][-j_l-1][i_l+j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
void kernel_seidel_2d(int tsteps, int n, double A[40+0][40+0][40+0])
{
   int t, i, j;
   //PIPS generated variable
   int i_t, j_t, i_l, j_l;

#pragma scop
   polybench_timer_start();

   for(t = 1; t <= n-1; t += 1)
loop_1:
      for(i_t = ((((-3*n-5)/16)>(((((-n-5)/16)>(((-3*n+3)/8))) ? ((-n-5)/16): (((-3*n+3)/8))))) ? ((-3*n-5)/16): (((((-n-5)/16)>(((-3*n+3)/8))) ? ((-n-5)/16): (((-3*n+3)/8))))); i_t <= ((((n-3)/2)<(((((n-3)/4)<(((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))) ? ((n-3)/4): (((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))))) ? ((n-3)/2): (((((n-3)/4)<(((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))) ? ((n-3)/4): (((((3*n-9)/8)<(((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))) ? ((3*n-9)/8): (((((5*n-9)/16)<(((3*n-9)/16))) ? ((5*n-9)/16): (((3*n-9)/16))))))))); i_t += 1)
         for(j_t = ((((-4*i_t-n+11)/12)>(((((-4*i_t-n+3)/4)>(((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))) ? ((-4*i_t-n+3)/4): (((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))))) ? ((-4*i_t-n+11)/12): (((((-4*i_t-n+3)/4)>(((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))) ? ((-4*i_t-n+3)/4): (((((-8*i_t-n+3)/8)>(((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))) ? ((-8*i_t-n+3)/8): (((((4*i_t-n+6)/4)>(((-n+10)/8))) ? ((4*i_t-n+6)/4): (((-n+10)/8))))))))); j_t <= (((i_t+2)<(((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))) ? (i_t+2): (((((-i_t+1)/3)<(((-8*i_t+n-3)/8))) ? ((-i_t+1)/3): (((-8*i_t+n-3)/8))))); j_t += 1)
            for(i_l = (((2)>((((-8*i_t-8*j_t-5)>((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))) ? (-8*i_t-8*j_t-5): ((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))))) ? (2): ((((-8*i_t-8*j_t-5)>((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))) ? (-8*i_t-8*j_t-5): ((((8*i_t+8*j_t+2)>((-16*j_t+2))) ? (8*i_t+8*j_t+2): ((-16*j_t+2))))))); i_l <= (((8*i_t+8*j_t+2*n+3)<((((-8*i_t-8*j_t+2*n-4)<((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))) ? (-8*i_t-8*j_t+2*n-4): ((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))))) ? (8*i_t+8*j_t+2*n+3): ((((-8*i_t-8*j_t+2*n-4)<((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))) ? (-8*i_t-8*j_t+2*n-4): ((((-16*j_t+17)<((2*n-4))) ? (-16*j_t+17): ((2*n-4))))))); i_l += 1)
               for(j_l = ((((-i_l-8*i_t-8*j_t-6)/2)>((((-i_l+1)>((-n+2))) ? (-i_l+1): ((-n+2))))) ? ((-i_l-8*i_t-8*j_t-6)/2): ((((-i_l+1)>((-n+2))) ? (-i_l+1): ((-n+2))))); j_l <= ((((-i_l-8*i_t-8*j_t)/2)<((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))) ? ((-i_l-8*i_t-8*j_t)/2): ((((-i_l+n-2)<((-1))) ? (-i_l+n-2): ((-1))))); j_l += 1)
                  A[t][-j_l][i_l+j_l] = (A[t-1][-j_l-1][i_l+j_l-1]+A[t-1][-j_l-1][i_l+j_l])/9.0;
   polybench_timer_stop();

   polybench_timer_print();
#pragma endscop

}
